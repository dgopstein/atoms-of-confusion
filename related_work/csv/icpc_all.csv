2015,Test complement exclusion: guarantees from dynamic analysis,Andreas Zeller,http://dl.acm.org/ft_gateway.cfm?id=2820284&ftid=1617766&dwn=1&CFID=750670497&CFTOKEN=35487510,"Modern test generation techniques allow to generate as many executions as needed; combined with dynamic analysis, they allow for understanding program behavior in situations where static analysis is challenged or impossible. However, all these dynamic techniques would still suffer from the incompleteness of testing: If some behavior has not been observed so far, there is no guarantee that it may not occur in the future. In this talk, I introduce a method called Test Complement Exclusion that combines test generation and sandboxing to provide such a guarantee. Test Complement Exclusion will have significant impact in the security domain, as it effectively detects and protects against unexpected changes of program behavior; however, guarantees would also strengthen findings in dynamic software comprehension. First experiments on real-world Android programs demonstrate the feasibility of the approach."
2015,Concise and consistent naming: ten years later,"Florian Deissenboeck, Markus Pizka","http://dl.acm.org/JavaScript: expandcollapse('expcoll3',3)","Approximately 70% of the source code of a software system consists of identifiers. Hence, the names chosen as identifiers are of paramount importance for the readability of computer programs and therewith their comprehensibility. However, virtually every programming language allows programmers to use almost arbitrary sequences of characters as identifiers which far too often results in more or less meaningless or even misleading naming. Coding style guides address this problem but are usually limited to general and hard to enforce rules like ""identifiers should be self-describing"". At IWPC 2005 we proposed a formal model, based on bijective mappings between concepts and names, provides a solid foundation for the definition of precise rules for concise and consistent naming. The enforcement of these rules was supported by a tool that incrementally builds and maintains a complete identifier dictionary while the system is being developed. The identifier dictionary explained the language used in the software system, aids in consistent naming, and improves productivity of programmers by proposing suitable names depending on the current context. In this talk we analyze the first ten year of the model we proposed at IWPC 2005 by analyzing its impact on the program comprehension community as well as its applicability in practice."
2015,Discovering loners and phantoms in commit and issue data,"Gerald Schermann, Martin Brandtner, Sebastiano Panichella, Philipp Leitner, Harald Gall",http://dl.acm.org/ft_gateway.cfm?id=2820287&ftid=1617790&dwn=1&CFID=750670497&CFTOKEN=35487510,"The interlinking of commit and issue data has become a de-facto standard in software development. Modern issue tracking systems, such as JIRA, automatically interlink commits and issues by the extraction of identifiers (e.g., issue key) from commit messages. However, the conventions for the use of interlinking methodologies vary between software projects. For example, some projects enforce the use of identifiers for every commit while others have less restrictive conventions. In this work, we introduce a model called PaLiMod to enable the analysis of interlinking characteristics in commit and issue data. We surveyed 15 Apache projects to investigate differences and commonalities between linked and non-linked commits and issues. Based on the gathered information, we created a set of heuristics to interlink the residual of non-linked commits and issues. We present the characteristics of Loners and Phantoms in commit and issue data. The results of our evaluation indicate that the proposed PaLiMod model and heuristics enable an automatic interlinking and can indeed reduce the residual of non-linked commits and issues in software projects."
2015,Detection of software evolution phases based on development activities,"Omar Benomar, Hani Abdeen, Houari Sahraoui, Pierre Poulin, Mohamed Aymen Saied",http://dl.acm.org/ft_gateway.cfm?id=2820288&ftid=1617779&dwn=1&CFID=750670497&CFTOKEN=35487510,"Software evolution history is usually represented at fine granularity by commits in software repositories, and at coarse granularity by software releases. In order to gain insights on development activities and on software evolution, the information on releases is too general, whereas the information on commits is prohibitively large to be efficiently processed by a developer. This paper proposes an automatic technique for the identification of distinct phases of evolution. Such software evolution phases are characterized by similar development activities in terms of changes to entities. Therefore, our technique decomposes software evolution history to assist developers identify periods of different development activities. Our analysis technique is a search-based optimization of the best decomposition of commits from the software repository using heuristics such as classes changed in each commit, and the magnitude/importance of these changes. To validate our technique, we applied it on the evolution history of five case studies covering multiple releases over several years of development. An interesting outcome of the evaluation is that our automatic decomposition of software evolution history recovered the original decomposition in software releases."
2015,I know what you did last summer: an investigation of how developers spend their time,"Roberto Minelli, Andrea Mocci and, Michele Lanza",http://dl.acm.org/ft_gateway.cfm?id=2820289&ftid=1617783&dwn=1&CFID=750670497&CFTOKEN=35487510,"Developing software is a complex mental activity, requiring extensive technical knowledge and abstraction capabilities. The tangible part of development is the use of tools to read, inspect, edit, and manipulate source code, usually through an IDE (integrated development environment). Common claims about software development include that program comprehension takes up half of the time of a developer, or that certain UI (user interface) paradigms of IDEs offer insufficient support to developers. Such claims are often based on anecdotal evidence, throwing up the question of whether they can be corroborated on more solid grounds. We present an in-depth analysis of how developers spend their time, based on a fine-grained IDE interaction dataset consisting of ca. 740 development sessions by 18 developers, amounting to 200 hours of development time and 5 million of IDE events. We propose an inference model of development activities to precisely measure the time spent in editing, navigating and searching for artifacts, interacting with the UI of the IDE, and performing corollary activities, such as inspection and debugging. We report several interesting findings which in part confirm and reinforce some common claims, but also disconfirm other beliefs about software development."
2015,RCLinker: automated linking of issue reports and commits leveraging rich contextual information,"Tien-Duy B. Le, Mario Linares-Vásquez, David Lo, Denys Poshyvanyk",http://dl.acm.org/ft_gateway.cfm?id=2820290&ftid=1617767&dwn=1&CFID=750670497&CFTOKEN=35487510,"Links between issue reports and their corresponding commits in version control systems are often missing. However, these links are important for measuring the quality of a software system, predicting defects, and many other tasks. Several approaches have been designed to solve this problem by automatically linking bug reports to source code commits via comparison of textual information in commit messages and bug reports. Yet, the effectiveness of these techniques is oftentimes suboptimal when commit messages are empty or contain minimum information; this particular problem makes the process of recovering traceability links between commits and bug reports particularly challenging. In this work, we aim at improving the effectiveness of existing bug linking techniques by utilizing rich contextual information. We rely on a recently proposed approach, namely ChangeScribe, which generates commit messages containing rich contextual information by using code summarization techniques. Our approach then extracts features from these automatically generated commit messages and bug reports, and inputs them into a classification technique that creates a discriminative model used to predict if a link exists between a commit message and a bug report. We compared our approach, coined as RCLinker (Rich Context Linker), to MLink, which is an existing state-of-the-art bug linking approach. Our experiment results on bug reports from six software projects show that RCLinker outperforms MLink in terms of F-measure by 138.66%."
2015,Generating reproducible and replayable bug reports from Android application crashes,"Martin White, Mario Linares-Vásquez, Peter Johnson, Carlos Bernal-Cárdenas, Denys Poshyvanyk",http://dl.acm.org/ft_gateway.cfm?id=2820291&ftid=1617780&dwn=1&CFID=750670497&CFTOKEN=35487510,"Manually reproducing bugs is time-consuming and tedious. Software maintainers routinely try to reproduce unconfirmed issues using incomplete or noninformative bug reports. Consequently, while reproducing an issue, the maintainer must augment the report with information---such as a reliable sequence of descriptive steps to reproduce the bug---to aid developers with diagnosing the issue. This process encumbers issue resolution from the time the bug is entered in the issue tracking system until it is reproduced. This paper presents crashdroid, an approach for automating the process of reproducing a bug by translating the call stack from a crash report into expressive steps to reproduce the bug and a kernel event trace that can be replayed on-demand. crashdroid manages traceability links between scenarios' natural language descriptions, method call traces, and kernel event traces. We evaluated crashdroid on several open-source Android applications infected with errors. Given call stacks from crash reports, crashdroid was able to generate expressive steps to reproduce the bugs and automatically replay the crashes. Moreover, users were able to confirm the crashes faster with crashdroid than manually reproducing the bugs or using a stress-testing tool."
2015,Active semi-supervised defect categorization,"Ferdian Thung, Xuan-Bach D. Le, David Lo",http://dl.acm.org/ft_gateway.cfm?id=2820292&ftid=1617791&dwn=1&CFID=750670497&CFTOKEN=35487510,"Defects are inseparable part of software development and evolution. To better comprehend problems affecting a software system, developers often store historical defects and these defects can be categorized into families. IBM proposes Orthogonal Defect Categorization (ODC) which include various classifications of defects based on a number of orthogonal dimensions (e.g., symptoms and semantics of defects, root causes of defects, etc.). To help developers categorize defects, several approaches that employ machine learning have been proposed in the literature. Unfortunately, these approaches often require developers to manually label a large number of defect examples. In practice, manually labelling a large number of examples is both time-consuming and labor-intensive. Thus, reducing the onerous burden of manual labelling while still being able to achieve good performance is crucial towards the adoption of such approaches. To deal with this challenge, in this work, we propose an active semi-supervised defect prediction approach. It is performed by actively selecting a small subset of diverse and informative defect examples to label (i.e., active learning), and by making use of both labeled and unlabeled defect examples in the prediction model learning process (i.e., semi-supervised learning). Using this principle, our approach is able to learn a good model while minimizing the manual labeling effort. To evaluate the effectiveness of our approach, we make use of a benchmark dataset that contains 500 defects from three software systems that have been manually labelled into several families based on ODC. We investigate our approach's ability in achieving good classification performance, measured in terms of weighted precision, recall, F-measure, and AUC, when only a small number of manually labelled defect examples are available. Our experiment results show that our active semi-supervised defect categorization approach is able to achieve a weighted precision, recall, F-measure, and AUC of 0.651, 0.669, 0.623, and 0.710, respectively, when only 50 defects are manually labelled. Furthermore, it outperforms an existing active multi-class classification algorithm, proposed in the machine learning community, by a substantial margin."
2015,Could we infer unordered API usage patterns only using the library source code?,"Mohamed Aymen Saied, Hani Abdeen, Omar Benomar, Houari Sahraoui",http://dl.acm.org/ft_gateway.cfm?id=2820294&ftid=1617781&dwn=1&CFID=750670497&CFTOKEN=35487510,"Learning to use existing or new software libraries is a difficult task for software developers, which would impede their productivity. Much existing work has provided different techniques to mine API usage patterns from client programs in order to help developers on understanding and using existing libraries. However, considering only client programs to identify API usage patterns is a strong constraint as the client programs source code is not always available or the clients themselves do not exist yet for newly released APIs. In this paper, we propose a technique for mining Non Client-based Usage Patterns (NCBUP-miner). We detect unordered API usage patterns as distinct groups of API methods that are structurally and semantically related and thus may contribute together to the implementation of a particular functionality for potential client programs. We evaluated our technique through four APIs. The obtained results are comparable to those of client-based approaches in terms of usage-patterns cohesion."
2015,Searching the state space: a qualitative study of API protocol usability,"Joshua Sushine, James D. Herbsleb, Jonathan Aldrich",http://dl.acm.org/ft_gateway.cfm?id=2820295&ftid=1617762&dwn=1&CFID=750670497&CFTOKEN=35487510,"Application Programming Interfaces (APIs) often define protocols --- restrictions on the order of client calls to API methods. API protocols are common and difficult to use, which has generated tremendous research effort in alternative specification, implementation, and verification techniques. However, little is understood about the barriers programmers face when using these APIs, and therefore the research effort may be misdirected. To understand these barriers better, we perform a two-part qualitative study. First, we study developer forums to identify problems that developers have with protocols. Second, we perform a think-aloud observational study, in which we systematically observe professional programmers struggle with these same problems to get more detail on the nature of their struggles and how they use available resources. In our observations, programmer time was spent primarily on four types of searches of the protocol state space. These observations suggest protocol-targeted tools, languages, and verification techniques will be most effective if they enable programmers to efficiently perform state search."
2015,Synonym suggestion for tags on stack overflow,"Stefanie Beyer, Martin Pinzger",http://dl.acm.org/ft_gateway.cfm?id=2820296&ftid=1617774&dwn=1&CFID=750670497&CFTOKEN=35487510,"The amount of diverse tags used to classify posts on Stack Overflow increased in the last years to more than 38,000 tags. Many of these tags have the same or similar meaning. Stack Overflow provides an approach to reduce the amount of tags by allowing privileged users to manually create synonyms. However, currently exist only 2,765 synonym-pairs on Stack Overflow that is quite low compared to the total number of tags. To comprehend how synonym-pairs are built, we manually analyzed the tags and how the synonyms could be created automatically. Based on our findings, we then present TSST, a tag synonym suggestion tool, that outputs a ranked list of possible synonyms for each input tag. We first evaluated TSST with the 2,765 approved synonym-pairs of Stack Overflow. For 88.4% of the tags TSST finds the correct synonyms, for 72.2% the correct synonym is within the top 10 suggestions. In addition, we applied TSST to 10 randomly selected Android related tags and evaluated the suggested synonyms with 20 Android app developers in an online survey. Overall, in 80% of their ratings, developers found an adequate synonym suggested by TSST."
2015,"Code, camera, action: how software developers document and share program knowledge using YouTube","Laura MacLeod, Margaret-Anne Storey, Andreas Bergen",http://dl.acm.org/ft_gateway.cfm?id=2820297&ftid=1617784&dwn=1&CFID=750670497&CFTOKEN=35487510,"Creating documentation is a challenging task in software engineering and most techniques involve the laborious and sometimes tedious job of writing text. This paper explores an alternative to traditional text-based documentation, the screencast, which captures a developer's screen while they narrate how a program or software tool works. We conducted a study to investigate how developers produce and share developer-focused screencasts using the YouTube social platform. First, we identified and analyzed a set of development screencasts to determine how developers have adapted to the medium to meet the demands of development-related documentation needs. We also explored the techniques and strategies used for sharing software knowledge. Second, we interviewed screencast producers to understand their motivations for creating screencasts, and to uncover the perceived benefits and challenges in producing code-focused videos. Our findings reveal that video is a useful medium for communicating program knowledge between developers, and that developers build their online personas and reputation by sharing videos through social channels."
2015,Generating refactoring proposals to remove clones from automated system tests,"Benedikt Hauptmann, Elmar Juergens, Volkmar Woinke",http://dl.acm.org/ft_gateway.cfm?id=2820298&ftid=1617785&dwn=1&CFID=750670497&CFTOKEN=35487510,"Automated system tests often have many clones, which make them complex to understand and costly to maintain. Unfortunately, removing clones is challenging as there are numerous possibilities of how to refactor them to reuse components such as subroutines. Additionally, clones often overlap partly which makes it particularly difficult to decide which parts to extract. If done wrongly, reuse potential is not leveraged optimally and structures between tests and reuse components will become unnecessarily complex. We present a method to support test engineers in extracting overlapping clones. Using grammar inference algorithms, we generate a refactoring proposal that demonstrates test engineers how overlapping clones can be extracted. Furthermore, we visualize the generated refactoring proposal to make it easily understandable for test engineers. An industrial case study demonstrates that our approach helps test engineers to gain information of the reuse potential of test suites and guides them to perform refactorings."
2015,Framework instantiation using cookbooks constructed with static and dynamic analysis,"Raquel F. Q. Lafetá, Marcelo A. Maia, David Röthlisberger",http://dl.acm.org/ft_gateway.cfm?id=2820300&ftid=1617792&dwn=1&CFID=750670497&CFTOKEN=35487510,"Software reuse is one of the major goals in software engineering. Frameworks promote the reuse of not only individual building blocks, but also of system design. However, framework instantiation requires a substantial understanding effort. High-quality documentation is essential to minimize this effort. However, in most cases, appropriate documentation does not exist or is not updated. Our hypothesis is that the framework code itself and existing instantiations can serve as a guide for new instantiations. The challenge is that users still have to read large portions of code, which hinders the understanding process, thus our goal is to provide relevant information for framework instantiation with static and dynamic analysis of the framework and pre-existing instantiations. The final documentation is presented in a cookbook style, where recipes are composed of programming tasks and information about hotspots related to a feature instantiation. We conducted two preliminary experiments, the first to evaluate the recall of the approach and the second to study the practical usefulness of the recipe information for developers. Results reveal that our approach discloses accurate and relevant information about classes and methods used for framework instantiation."
2015,Two user perspectives in program comprehension: end users and developer users,Tobias Roehm,http://dl.acm.org/ft_gateway.cfm?id=2820302&ftid=1617763&dwn=1&CFID=750670497&CFTOKEN=35487510,"Recent empirical studies identified an interest of software developers in high-level usage information, i.e. why and how end users employ a software application. Furthermore, recent empirical work found that developers of interactive applications put themselves in the role of users by interacting with the user interface during program comprehension. This paper presents an exploratory case study investigating these two user perspectives in detail. The study focuses on information needs regarding software usage and developers in the role of users during program comprehension. 21 developers from six software companies were observed during program comprehension tasks and interviewed. The resulting observation protocols and interview minutes were analyzed using coding. We found that developers are interested in information about use cases and user behavior, user goals and user needs, failure reproduction steps, and application domain concepts. But such information is rarely available to them during program comprehension. This mismatch indicates a potential to improve program comprehension practices by capturing such information and providing it to developers. Furthermore, we found that developers interact with the user interface of an interactive application to reproduce failures, to find relevant source code, to test changes, to trigger the debugger, and to familiarize with an unknown part of the application. Also, developers conceptually map elements of the user interface to source code, data structures, and algorithms. We call this behavior ""UI-based comprehension"" and argue that it is part of a broader comprehension strategy together with comprehension activities like reading source code or debugging."
2015,Exploring the use of concern element role information in feature location evaluation,"Emily Hill, David Shepherd, Lori Pollock",http://dl.acm.org/ft_gateway.cfm?id=2820303&ftid=1617772&dwn=1&CFID=750670497&CFTOKEN=35487510,"Before making changes, programmers need to locate and understand source code that corresponds to specific functionality, i.e., perform concern or feature location. Numerous concern and feature location techniques have been proposed, but to the best of our knowledge, no existing techniques or evaluations report information on what role a code element plays in the larger concern. In this paper, we report on two case studies that investigate two hypotheses on how evaluation studies of concern location techniques can be strengthened by utilizing concern role information: (1) by increasing agreement among human annotators for gold set establishment and (2) by providing richer information about the elements ranked as relevant by concern location techniques, which could help further improve the tools. We conducted a case study of 6 Java developers annotating 3 concerns with role information. When the developers understood the task description, pairwise agreement increased by 20%, 25%, and 135% for the 3 concerns over a prior concern location study without role information. Our findings also suggest that there may be core element roles that need to be annotated by humans, but that the remaining roles may be automatically derived, which could facilitate more reliable concern location benchmarks in the future. We also conducted an exploratory study of the element roles represented in results returned by a state of the art feature location tool. The results of these two studies suggest that integrating concern element role information into evaluations can help to strengthen both the gold set establishment and the analysis of results returned by various tools."
2015,Rethinking user interfaces for feature location,"Fabian Beck, Bogdan Dit, Jaleo Velasco-Madden, Daniel Weiskopf, Denys Poshyvanyk",http://dl.acm.org/ft_gateway.cfm?id=2820304&ftid=1617786&dwn=1&CFID=750670497&CFTOKEN=35487510,"Locating features in large software systems is a fundamental maintenance task for developers when fixing bugs and extending software. We introduce In Situ Impact Insight (I3), a novel user interface to support feature location. In addition to a list of search results, I3 provides support for developers during browsing and inspecting the retrieved code entities. In situ visualizations augment results and source code with additional information relevant for further exploration. Developers are able to retrieve details on the textual similarity of a source code entity to the search query and to other entities, as well as the information on co-changed entities from a project's history. Execution traces recorded during program runs can be used as filters to further refine the search results. We implemented I3 as an Eclipse plug-in and tested it in a user study involving 18 students and professional developers that were asked to perform three feature location tasks chosen from the issue tracking system of jEdit. The results of our study suggest that I3's user interface is intuitive and unobtrusively supports developers with the required information when and where they need it."
2015,Detecting clones in Android applications through analyzing user interfaces,"Charlie Soh, Hee Beng Kuan Tan, Yauhen Leanidavich Arnatovich, Lipo Wang",http://dl.acm.org/ft_gateway.cfm?id=2820305&ftid=1617793&dwn=1&CFID=750670497&CFTOKEN=35487510,"The blooming mobile smart phone device industry has attracted a large number of application developers. However, due to the availability of reverse engineering tools for Android applications, it also caught the attention of plagiarists and malware writers. In recent years, application cloning has become a serious threat to the Android market. In previous work, mobile application clone detection mainly focuses on code-based analysis. Such an approach lacks resilient to advanced obfuscation techniques. Their efficiency is also questionable, as billions of opcodes need to be processed for cross-market clone detection. In this paper, we propose a novel technique of detecting Android application clones based on the analysis of user interface (UI) information collected at runtime. By leveraging on the multiple entry points feature of Android applications, the UI information can be collected easily without the need to generate relevant inputs and execute the entire application. Another advantage of our technique is obfuscation resilient since semantics preserving obfuscation technique do not affect runtime behaviors. We evaluated our approach on a set of real-world dataset and it has a low false positive rate and false negative rate. Furthermore, the results also show that our approach is effective in detecting different types of repackaging attacks."
2015,Manually locating features in industrial source code: the search actions of software nomads,"Howell Jordan, Jacek Rosik, Sebastian Herold, Goetz Botterweck, Jim Buckley",http://dl.acm.org/ft_gateway.cfm?id=2820307&ftid=1617787&dwn=1&CFID=750670497&CFTOKEN=35487510,"Expert software engineers working on large systems often need to perform feature location when moving to work in unfamiliar areas. We hypothesise that leveraging the system-specific knowledge of these software nomads may help to improve semi-automated feature location techniques. In order to assess and understand how software nomads perform manual feature location searches, two expert professional software engineers were observed in-vivo following a think-aloud protocol while performing manual feature location on a large-scale heterogeneous system. The nomads' search actions were found to be around twice as effective as those reported in previous studies. This cannot be explained by sophisticated use of tools or complex queries. We conclude that system rules and conventions are frequently used by experts when constructing feature location search terms."
2015,From obfuscation to comprehension,"Eran Avidan, Dror G. Feitelson",http://dl.acm.org/ft_gateway.cfm?id=2820308&ftid=1617764&dwn=1&CFID=750670497&CFTOKEN=35487510,"Code obfuscation techniques are widely used in industry to increase protection of source code and intellectual property. The idea is that even if attackers gain hold of source code, it will be hard for them to understand what it does and how. Thus obfuscation techniques are specifically targeted at human comprehension of code. We suggest that the ideas and experience embedded in obfuscations can be used to learn about comprehension. In particular, we survey known obfuscation techniques and use them in an attempt to derive metrics for code (in)comprehensibility. This leads to emphasis on issues such as identifier naming, which are typically left on the sidelines in discussions of code comprehension, and motivates increased efforts to measure their effect."
2015,The plague doctor: a promising cure for the window plague,"Roberto Minelli, Andrea Mocci, Michele Lanza",http://dl.acm.org/ft_gateway.cfm?id=2820309&ftid=1617773&dwn=1&CFID=750670497&CFTOKEN=35487510,"Modern Integrated Development Environments (IDEs) are often affected by the ""window plague"", an overly crowded workspace with many open windows and tabs. The main cause is the lack of navigation support in IDEs, also due to the many---and not always obvious---complex relationships that exist between program entities. Researchers have shown that it is possible to mitigate the window plague by exploiting the data obtained by monitoring how developers interact with the user interface of the IDE. However, despite initial results the approach was never fully integrated in an IDE. In our previous work, we implemented DFlow, an automatic interaction profiler that monitors all the fine-grained interactions of the developer with the IDE. Here we present a first prototype of the Plague Doctor, a tool that seamlessly detects the windows that are less likely to be used in the future and automatically closes them. We discuss our long term vision on how to fully exploit the interaction data recorded by DFlow to provide a more effective cure for the window plague."
2015,Polymorphism in the spotlight: studying its prevalence in Java and Smalltalk,"Nevena Milojković, Andrea Caracciolo, Mircea Filip Lungu, Oscar Nierstrasz, David Röthlisberger, Romain Robbes",http://dl.acm.org/ft_gateway.cfm?id=2820311&ftid=1617768&dwn=1&CFID=750670497&CFTOKEN=35487510,"Subtype polymorphism is a cornerstone of object-oriented programming. By hiding variability in behavior behind a uniform interface, polymorphism decouples clients from providers and thus enables genericity, modularity and extensibility. At the same time, however, it scatters the implementation of the behavior over multiple classes thus potentially hampering program comprehension. The extent to which polymorphism is used in real programs and the impact of polymorphism on program comprehension are not very well understood. We report on a preliminary study of the prevalence of polymorphism in several hundred open source software systems written in Smalltalk, one of the oldest object-oriented programming languages, and in Java, one of the most widespread ones. Although a large portion of the call sites in these systems are polymorphic, a majority have a small number of potential candidates. Smalltalk uses polymorphism to a much greater extent than Java. We discuss how these findings can be used as input for more detailed studies in program comprehension and for better developer support in the IDE."
2015,A survey of the forms of Java reference names,"Simon Butler, Michel Wermelinger, Yijun Yu",http://dl.acm.org/ft_gateway.cfm?id=2820312&ftid=1617795&dwn=1&CFID=750670497&CFTOKEN=35487510,"The readability of identifiers is a major factor of program comprehension and an aim of naming convention guidelines. Due to their semantic content, identifiers are also used in feature and bug location, among other software maintenance tasks. Looking at how names are used in practice may lead to insights on potential problems for comprehension and for programming support tools that process identifiers. Class and method names are already well represented in the literature. This paper presents an investigation of Java field, formal argument and local variable names, which we collectively call reference names. These names cannot be ignored because they constitute over half the unique names and almost 70% of the name declarations in the corpus investigated. We analysed the forms of 3.5 million reference name declarations in 60 well known Java projects, examining the phrasal structure of names composed of known words and acronyms. The structures found in practice were evaluated against those given in the literature. The use of unknown abbreviations and words, which may pose a problem for program comprehension, was also identified. Based on our observations of the rich diversity of reference names, we suggest issues to be taken into account for future academic research and for improving tools that rely on names as sources of information."
2015,Make it simple: an empirical analysis of GNU make feature use in open source projects,"Douglas H. Martin, James R. Cordy, Bram Adams, Giulio Antoniol",http://dl.acm.org/ft_gateway.cfm?id=2820313&ftid=1617796&dwn=1&CFID=750670497&CFTOKEN=35487510,"Make is one of the oldest build technologies and is still widely used today, whether by manually writing Makefiles, or by generating them using tools like Autotools and CMake. Despite its conceptual simplicity, modern Make implementations such as GNU Make have become very complex languages, featuring functions, macros, lazy variable assignments and (in GNU Make 4.0) the Guile embedded scripting language. Since we are interested in understanding how widespread such complex language features are, this paper studies the use of Make features in almost 20,000 Makefiles, comprised of over 8.4 million lines, from more than 350 different open source projects. We look at the popularity of features and the difference between hand-written Makefiles and those generated using various tools. We find that generated Makefiles use only a core set of features and that more advanced features (such as function calls) are used very little, and almost exclusively in hand-written Makefiles."
2015,License usage and changes: a large-scale study of Java projects on GitHub,"Christopher Vendome, Mario Linares-Vásquez, Gabriele Bavota, Massimiliano Di Penta, Daniel German, Denys Poshyvanyk",http://dl.acm.org/ft_gateway.cfm?id=2820314&ftid=1617797&dwn=1&CFID=750670497&CFTOKEN=35487510,"Software licenses determine, from a legal point of view, under which conditions software can be integrated, used, and above all, redistributed. Licenses evolve over time to meet the needs of development communities and to cope with emerging legal issues and new development paradigms. Such evolution of licenses is likely to be accompanied by changes in the way how software uses such licenses, resulting in some licenses being adopted while others are abandoned. This paper reports a large empirical study aimed at quantitatively and qualitatively investigating when and why developer change software licenses. Specifically, we first identify licenses' changes in 1,731,828 commits, representing the entire history of 16,221 Java projects hosted on GitHub. Then, to understand the rationale of license changes, we perform a qualitative analysis---following a grounded theory approach---of commit notes and issue tracker discussions concerning licensing topics and, whenever possible, try to build traceability links between discussions and changes. Our results point out a lack of traceability of when and why licensing changes are made. This can be a major concern, because a change in the license of a system can negatively impact those that reuse it."
2015,Unsupervised software categorization using bytecode,"Javier Escobar-Avila, Mario Linares-Vásquez, Sonia Haiduc",http://dl.acm.org/ft_gateway.cfm?id=2820315&ftid=1617798&dwn=1&CFID=750670497&CFTOKEN=35487510,"Automatic software categorization is the task of assigning software systems or libraries to categories based on their functionality. Correctly assigning these categories is essential to ensure that relevant software can be easily retrieved by developers from large repositories. State of the art approaches either rely on the availability of the source code, or use supervised machine learning approaches, which require a set of already labeled software as training data. These restrictions make current approaches fail when such information is not available. We propose a novel approach, which overcomes these limitations by using semantic information recovered from bytecode and an unsupervised algorithm to assign categories to software systems. We evaluated our approach in a study on the Apache Foundation Repository of Java libraries and the results indicate that our approach is able to correctly identify a correct category for 86% of the libraries."
2015,The last line effect,"Moritz Beller, Andy Zaidman, Andrey Karpov",http://dl.acm.org/ft_gateway.cfm?id=2820317&ftid=1617788&dwn=1&CFID=750670497&CFTOKEN=35487510,"Micro-clones are tiny duplicated pieces of code; they typically comprise only a few statements or lines. In this paper, we expose the ""last line effect,"" the phenomenon that the last line or statement in a micro-clone is much more likely to contain an error than the previous lines or statements. We do this by analyzing 208 open source projects and reporting on 202 faulty micro-clones."
2015,How programmers read regular code: a controlled experiment using eye tracking,"Ahmad Jbara, Dror G. Feitelson",http://dl.acm.org/ft_gateway.cfm?id=2820319&ftid=1617775&dwn=1&CFID=750670497&CFTOKEN=35487510,"Regular code, which includes repetitions of the same basic pattern, has been shown to have an effect on code comprehension: a regular function can be just as easy to comprehend as an irregular one with the same functionality, despite being longer and including more control constructs. It has been speculated that this effect is due to leveraging the understanding of the first instances to ease the understanding of repeated instances of the pattern. To verify and quantify this effect, we use eye tracking to measure the time and effort spent reading and understanding regular code. The results are that time and effort invested in the initial code segments are indeed much larger than those spent on the later ones, and the decay in effort can be modeled by an exponential or cubic model. This shows that syntactic code complexity metrics (such as LOC and MCC) need to be made context-sensitive, e.g. by giving reduced weight to repeated segments according to their place in the sequence."
2015,Eye movements in code reading: relaxing the linear order,"Teresa Busjahn, Roman Bednarik, Andrew Begel, Martha Crosby, James H. Paterson, Carsten Schulte, Bonita Sharif, Sascha Tamm",http://dl.acm.org/ft_gateway.cfm?id=2820320&ftid=1617776&dwn=1&CFID=750670497&CFTOKEN=35487510,"Code reading is an important skill in programming. Inspired by the linearity that people exhibit while natural language text reading, we designed local and global gaze-based measures to characterize linearity (left-to-right and top-to-bottom) in reading source code. Unlike natural language text, source code is executable and requires a specific reading approach. To validate these measures, we compared the eye movements of novice and expert programmers who were asked to read and comprehend short snippets of natural language text and Java programs. Our results show that novices read source code less linearly than natural language text. Moreover, experts read code less linearly than novices. These findings indicate that there are specific differences between reading natural language and source code, and suggest that non-linear reading skills increase with expertise. We discuss the implications for practitioners and educators."
2015,Comparing trace visualizations for program comprehension through controlled experiments,"Florian Fittkau, Santje Finke, Wilhelm Hasselbring, Jan Waller",http://dl.acm.org/ft_gateway.cfm?id=2820321&ftid=1617789&dwn=1&CFID=750670497&CFTOKEN=35487510,"For efficient and effective program comprehension, it is essential to provide software engineers with appropriate visualizations of the program's execution traces. Empirical studies, such as controlled experiments, are required to assess the effectiveness and efficiency of proposed visualization techniques. We present controlled experiments to compare the trace visualization tools Extravis and ExplorViz in typical program comprehension tasks. We replicate the first controlled experiment with a second one targeting a differently sized software system. In addition to a thorough analysis of the strategies chosen by the participants, we report on common challenges comparing trace visualization techniques. Besides our own replication of the first experiment, we provide a package containing all our experimental data to facilitate the verifiability, reproducibility and further extensibility of our presented results. Although subjects spent similar time on program comprehension tasks with both tools for a small-sized system, analyzing a larger software system resulted in a significant efficiency advantage of 28 percent less time spent by using ExplorViz. Concerning the effectiveness (correct solutions for program comprehension tasks), we observed a significant improvement of correctness for both object system sizes of 39 and 61 percent with ExplorViz."
2015,Towards visual reflexion models,"Marcello Romanelli, Andrea Mocci, Michele Lanza",http://dl.acm.org/ft_gateway.cfm?id=2820323&ftid=1617794&dwn=1&CFID=750670497&CFTOKEN=35487510,"Source code and models of a software system, like architectural views, tend to evolve separately and drift apart over time. Previous research has shown that it is possible to effectively relate them through a reflexion model, defined as a ""summarization of a software system from the viewpoint of a particular high-level model"". While effective, the process of constructing and analyzing reflexion models was supported by text-based tools with limited visual representation. With the original approach, it was relatively hard to understand which parts of the system were represented, and which parts of the system contributed to specific relations in the reflexion model. We present our vision on augmenting the construction and analysis of reflexion models with visual support, effectively providing the basis for visual reflexion models. We describe our approach, implemented as a web-based application, and two promising case studies involving two open-source projects."
2015,Understanding web applications using component based visual patterns,"Dan C. Cosma, Petru F. Mihancea",http://dl.acm.org/ft_gateway.cfm?id=2820324&ftid=1617777&dwn=1&CFID=750670497&CFTOKEN=35487510,"This paper introduces our approach for high-level system understanding that uses software visualization to analyze the presentation layer of Web applications. The technique is driven by static analysis, relies on state-of-the art concepts, and is technology-aware, so that it focuses on those precise particularities of the application's presentation layer that define its Web presence. By combining an approach initially developed for software testing with visualization, the essential structural dependencies between and within the Web components are extracted and reviewed. Initial evaluation shows that the technique is able to provide a comprehensive view that is very useful in spotting new and interesting visual patterns that give significant insight for software comprehension."
2015,Fault localization during system testing,"Pavan Kumar Chittimalli, Vipul Shah",http://dl.acm.org/ft_gateway.cfm?id=2820326&ftid=1617769&dwn=1&CFID=750670497&CFTOKEN=35487510,"Functional testing of business applications in the enterprise is carried out by independent test teams. Test scripts are generated manually or automatically from requirements, treating the IT systems as a black box. For every release, when test scripts fail to execute, the test teams need to ascertain the cause of failure, which could be due to mismatch between the requirements and the test models and test scripts, or faults in the test scripts or faults in the source code. The process is cumbersome and time consuming. While several techniques have been developed to localize source code faults, these target testing carried out by the developer. To help test teams localize faults, we propose the novel idea of applying source code based fault localization technique to process models that represent the system functionality. Experimental results show that the techniques when applied to models, were able to localize both test script and source code faults."
2015,Recovering workflows from functional tests,"Chetan Khadke, Sunjit Rana, Vipul Shah",http://dl.acm.org/ft_gateway.cfm?id=2820327&ftid=1617765&dwn=1&CFID=750670497&CFTOKEN=35487510,"When enterprises outsource maintenance of IT systems to service providers, thorough knowledge acquisition is critical to the success of the engagement. Program comprehension contributes significantly to acquiring knowledge of the IT systems. It is a common practice to execute test scripts to identify critical scenarios in the system and then trace these as flows in the programs. Instead of executing test scripts, we propose the novel idea of mining workflows from test scripts to construct formal process models. The global view provided by the mined model can not only help transition teams gain high level understanding of the system but also help identify critical flows. We also suggest categorization of test cases using supervised learning to improve comprehension."
2015,Reordering results of keyword-based code search for supporting simultaneous code changes,"Yusuke Sabi, Hiroaki Murakami, Yoshiki Higo, Shinji Kusumoto",http://dl.acm.org/ft_gateway.cfm?id=2820328&ftid=1617778&dwn=1&CFID=750670497&CFTOKEN=35487510,"Many research studies have been conducted to help simultaneous code changes on multiple code fragments. Code clones and logical couplings are often utilized in such research studies. However, most of them have been evaluated on only open source projects or students' software. In this paper, we report our academic-industrial collaboration with a software company. The collaboration is intended to suggest multiple code fragments to be changed simultaneously when a developer specifies a keyword such as variable names on source code. In the collaboration, we propose to use code clones and logical couplings information to reorder the code fragments. We confirmed that code clones and logical couplings worked well on helping simultaneous code changes on three projects that have being developed in the company."
2015,VerXCombo: an interactive data visualization of popular library version combinations,"Yuki Yano, Raula Gaikovina Kula, Takashi Ishio, Katsuro Inoue",http://dl.acm.org/ft_gateway.cfm?id=2820330&ftid=1617770&dwn=1&CFID=750670497&CFTOKEN=35487510,"In large software systems, it is common practice to adopt third-party libraries. Decisions by system maintainers to either update or introduce new third-party libraries can range from trivial to complex. For instance, incompatibility between internal library dependencies may complicate adoption. Therefore, system maintainers especially need adequate assurance of any candidate library release. Using the 'wisdom of the crowd', VerXCombo aims to assist system maintainers by mining popular library dependency patterns of similar systems. Through data interactions, VerXCombo leverages parallel sets to break-down large and complex dataset into distinguishable patterns of 1.) popular and 2.) latest library dependency release combinations. Populating our tool with a maven library dependency dataset from over 4,000 Java Open Source projects, we demonstrate through a case scenario navigation and best fit combinations of the VerXCombo tool. A video highlighting the main features of the tool can be found at: http://goo.gl/wWPylL"
2015,ITMViz: interactive topic modeling for source code analysis,"Amir M. Saeidi, Jurriaan Hage, Ravi Khadka, Slinger Jansen",http://dl.acm.org/ft_gateway.cfm?id=2820331&ftid=1617799&dwn=1&CFID=750670497&CFTOKEN=35487510,"Topic modeling has seen a surge in use for software comprehension. Although the models inferred from the source code are a great source of knowledge, they fail to fully capture the conceptual relationships between the topics. Here we investigate the use of interactive topic modeling for source code analysis by feeding-in information from the end-users, including developers and architects, to refine the inferred topic models. We have implemented a web-based toolkit called ITMViz to provide support to interpret the topic models, and use the results to cluster modules together. A medium-sized Java project is used to evaluate our approach in understanding the software system."
2015,ExceptionTracer: a solution recommender for exceptions in an integrated development environment,"Vahid Amintabar, Abbas Heydarnoori, Mohammad Ghafari",http://dl.acm.org/ft_gateway.cfm?id=2820332&ftid=1617771&dwn=1&CFID=750670497&CFTOKEN=35487510,"Exceptions are an indispensable part of the software development process. However, developers usually rely on imprecise results from a web search to resolve exceptions. More specifically, they should personally take into account the context of an exception; then, choose and adapt a relevant solution to solve the problem. In this paper, we present ExceptionTracer, an Eclipse plugin that helps developers to resolve exceptions with respect to the stack trace in Java programs. In particular, ExceptionTracer automatically provides candidate solutions to an exception by mining software systems in the SourceForge, as well as listing relevant discussions about the problem from the StackOverflow."
2015,Limpio: LIghtweight MPI instrumentatiOn,"Milan Pavlovic, Milan Radulovic, Alex Ramirez, Petar Radojković",http://dl.acm.org/ft_gateway.cfm?id=2820333&ftid=1617782&dwn=1&CFID=750670497&CFTOKEN=35487510,"Characterization of high-performance computing applications often has to be done without access to the source code. Computer architects, therefore, have a narrowed choice of instrumentation tools. Moreover, potentially large amount of collected data can prohibit creating a full timestamped event trace and analyzing it post-mortem. This paper describes Limpio --- a LIghtweight MPI instrumentatiOn framework, that allows dynamic instrumentation of user-selected MPI calls, and customization of data gathering, analysis and visualization."
2014,"Innovating in india: designing for constraint, computing for inclusion (keynote)",Edward Cutrell,http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2602160," A fundamental tenet of user-centered design is that the needs, wants, limitations, and contexts of end users are central to the process of creating products and services that can be used and understood by the people who will use them. Most of the time these end users aren’t all that different from the people designing the technology. But as the differences increase between designers and the people they’re designing for, understanding and empathizing with users becomes harder and even more important. As we build software for people and communities with vastly diverse backgrounds, cultures, languages, and education, we need to stretch our ideas of what users want and need and how best to serve them.   The Technology for Emerging Markets (TEM) group at Microsoft Research India seeks to address the needs and aspirations of people in the developing world who are just beginning to use computing technologies and services as well as those for whom access to computing still remains largely out of reach. Much of this work can be described as designing for constraint: constraints in education, in infrastructure, in financial resources, in languages and in many other areas. In this talk, I will describe some work from our group that explores how we have tried to manage these constraints to create software and systems for people and communities often overlooked by technologists. "
2014,The MoJo family: a story about clustering evaluation (invited talk),"Zhihua Wen, Vassilios Tzerpos",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2602159," The need to decompose large, complex software systems into smaller, more manageable subsystems has been recognized for more than two decades. Many cluster analysis algorithms have been applied to the software domain, and several algorithms specializing in software clustering have been developed. This in turn has created the need to evaluate and compare clustering results.   This talk will present some background on the software clustering problem and its challenges, as well as the software clustering evaluation and its challenges. It will then discuss the MoJo family of measures with an emphasis on MoJoFM (originally presented at IWPC 2004). "
2014,Do architectural design decisions improve the understanding of software architecture? two controlled experiments,"Mojtaba Shahin, Peng Liang, Zengyang Li",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597139," Architectural design decision (ADD) and its design rationale, as a paradigm shift on documenting and enriching architecture design description, is supposed to facilitate the understanding of architecture and the reasoning behind the design rationale, which consequently improves the architecting process and gets better architecture design results. But the lack of empirical evaluation that supports this statement is one of the major reasons that prevent industrial practitioners from using ADDs in their daily architecting activities. In this paper, we conducted two controlled experiments, as a family of experiments, to investigate how presence of ADDs can improve the understanding of architecture. The main results of our experiments are: (i) using ADDs and their rationale in architecture documentation does not affect the time needed for completing architecture design tasks; (ii) one experiment and the family of experiments achieved a significantly better understanding of architecture design when using ADDs; and (iii) with regard to the correctness of architecture understanding, more experienced participants benefited more from ADDs in comparison with less experienced ones. "
2014,Revealing the relationship between architectural elements and source code characteristics,"Vanius Zapalowski, Ingrid Nunes, Daltro José Nunes",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597156," Understanding how a software system is structured, i.e. its architecture, is crucial for software comprehension. It allows developers to understand an implemented system and reason about how non-functional requirements are addressed. Yet, many systems lack any architectural documentation, or it is often outdated due to software evolution. In current practice, the process of recovering a system's architecture relies primarily on developer knowledge. Although existing architecture recovery approaches can help to identify architectural elements, these approaches require improvement to identify architectural concepts of a system automatically. Towards this goal, we analyze the usefulness of adopting different code-level characteristics to group elements into architectural modules. Our main contributions are an evaluation of the relationships between different sets of characteristics and their corresponding accuracies, and the evaluation results, which help us to understand which characteristics reveal information about the source code structure. Our experiment shows that an identified set of characteristics achieves an average accuracy of 80%, which indicates the usefulness of the considered characteristics for architecture recovery and thus to improving software comprehension. "
2014,Understanding LDA in source code analysis,"David Binkley, Daniel Heinz, Dawn Lawrie, Justin Overfelt",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597150," Latent Dirichlet Allocation (LDA) has seen increasing use in the understanding of source code and its related artifacts in part because of its impressive modeling power. However, this expressive power comes at a cost: the technique includes several tuning parameters whose impact on the resulting LDA model must be carefully considered. An obvious example is the burn-in period; too short a burn-in period leaves excessive echoes of the initial uniform distribution. The aim of this work is to provide insights into the tuning parameter's impact. Doing so improves the comprehension of both, 1) researchers who look to exploit the power of LDA in their research and 2) those who interpret the output of LDA-using tools. It is important to recognize that the goal of this work is not to establish values for the tuning parameters because there is no universal best setting. Rather, appropriate settings depend on the problem being solved, the input corpus (in this case, typically words from the source code and its supporting artifacts), and the needs of the engineer performing the analysis. This work's primary goal is to aid software engineers in their understanding of the LDA tuning parameters by demonstrating numerically and graphically the relationship between the tuning parameters and the LDA output. A secondary goal is to enable more informed setting of the parameters. Results obtained using both production source code and a synthetic corpus underscore the need for a solid understanding of how to configure LDA's tuning parameters. "
2014,A diagnosis-based approach to software comprehension,"Alexandre Perez, Rui Abreu",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597151," Program comprehension is a time-consuming task performed during the process of reusing, reengineering, and enhancing existing systems. Currently, there are tools to assist in program comprehension by means of dynamic analysis, but, e.g., most cannot identify the topology and the interactions of a certain functionality in need of change, especially when used in large, real-world software applications. We propose an approach, coined Spectrum-based Feature Comprehension (SFC), that borrows techniques used for automatic software-fault-localization, which were proven to be effective even when debugging large applications in resource-constrained environments. SFC analyses the program by exploiting run-time information from test case executions to compute the components that are important for a given feature (and whether a component is used to implement just one feature or more), helping software engineers to understand how a program is structured and what the functionality's dependencies are. We present a toolset, coined Pangolin, that implements SFC and displays its report to the user using an intuitive visualization. A user study with the open-source application Rhino is presented, demonstrating the efficiency of Pangolin in locating the components that should be inspected when changing a certain functionality. "
2014,dsOli: data structure operation location and identification,David H. White,http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597800," Comprehension of C programs can be a difficult task, especially when they contain pointer-based dynamic data structures. This paper describes our tool dsOli which aims to simplify this problem by automatically locating and identifying data structure operations in C programs, such as inserting into a singly linked list. The approach is based on a dynamic analysis that seeks to identify functional units in a program by observing repetitive temporal patterns caused by multiple invocations of code fragments. The behaviour of these functional units is then classified by matching the associated heap states against templates describing common data structure operations. The analysis results are available to the user via XML output, and can also be viewed using an intuitive GUI which overlays the learnt information on the program source code. "
2014,"Version history, similar report, and structure: putting them together for improved bug localization","Shaowei Wang, David Lo",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597148," During the evolution of a software system, a large number of bug reports are submitted. Locating the source code files that need to be fixed to resolve the bugs is a challenging problem. Thus, there is a need for a technique that can automatically figure out these buggy files. A number of bug localization solutions that take in a bug report and output a ranked list of files sorted based on their likelihood to be buggy have been proposed in the literature. However, the accuracy of these tools still need to be improved.   In this paper, to address this need, we propose AmaLgam, a new method for locating relevant buggy files that puts together version history, similar reports, and structure. To do this, AmaLgam integrates a bug prediction technique used in Google which analyzes version history, with a bug localization technique named BugLocator which analyzes similar reports from bug report system, and the state-of-the-art bug localization technique BLUiR which considers structure. We perform a large-scale experiment on four open source projects, namely AspectJ, Eclipse, SWT and ZXing to localize more than 3,000 bugs. Compared with a history-aware bug localization solution of Sisman and Kak, our approach achieves a 46.1% improvement in terms of mean average precision (MAP). Compared with BugLocator, our approach achieves a 24.4% improvement in terms of MAP. Compared with BLUiR, our approach achieves a 16.4% improvement in terms of MAP. "
2014,Understanding the database manipulation behavior of programs,"Nesrine Noughi, Marco Mori, Loup Meurice, Anthony Cleve",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597790," Due to the lack of (up-do-date) documentation, software maintenance and evolution processes often necessitate the recovery of a sucient understanding of the software system, before the latter can be adapted to new or changing requirements. To address this problem, several program comprehension techniques have been proposed to support this preliminary phase of software maintenance and evolution. Nevertheless, those techniques generally fail in gaining a complete and accurate understanding in the case of modern data-intensive systems, which are characterized by complex, dynamic and continuous interactions between the application programs and their database. In particular, understanding the database manipulation behavior of a given program involves dierent levels of comprehension ranging from identifying to relating and interpreting the successive database access operations. In this paper, we present our early research achievements in the development of a tool-supported framework aiming to extract and understand the database manipulation behavior of data-intensive programs. "
2014,On mapping releases to commits in open source systems,"Joe F. Shobe, Md Yasser Karim, Motahareh Bahrami Zanjani, Huzefa Kagdi",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597792," The paper presents an empirical study on the release naming and structure in three open source projects: Google Chrome, GNU gcc, and Subversion. Their commonality and variability are discussed. An approach is developed that establishes the mapping from a particular release (major or minor) to the specific earliest and latest revisions, i.e., a commit window of a release, in the source control repository. For example, the major release 25.0 in Chrome is mapped to the earliest revision 157687 and latest revision 165096 in the trunk. This mapping between releases and commits would facilitate a systematic choice of history in units of the project evolution scale (i.e., commits that constitute a software release). A projected application is in forming a training set for a source-code change prediction model, e.g., using the association rule mining or machine learning techniques, commits from the source code history are needed. "
2014,Ranking crowd knowledge to assist software development,"Lucas B. L. de Souza, Eduardo C. Campos, Marcelo de A. Maia",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597146," StackOverflow.com (SO) is a Question and Answer service oriented to support collaboration among developers in order to help them solving their issues related to software development. In SO, developers post questions related to a programming topic and other members of the site can provide answers to help them. The information available on this type of service is also known as ""crowd knowledge"" and currently is one important trend in supporting activities related to software development and maintenance.   We present an approach that makes use of ""crowd knowledge"" available in SO to recommend information that can assist developers in their activities. This strategy recommends a ranked list of pairs of questions/answers from SO based on a query (list of terms). The ranking criteria is based on two main aspects: the textual similarity of the pairs with respect to the query (the developer's problem) and the quality of the pairs. Moreover, we developed a classifier to consider only ""how-to"" posts. We conducted an experiment considering programming problems on three different topics (Swing, Boost and LINQ) widely used by the software development community to evaluate the proposed recommendation strategy. The results have shown that for 77.14% of the assessed activities, at least one recommended pair proved to be useful concerning the target programming problem. Moreover, for all activities, at least one recommended pair had a source code snippet considered reproducible or almost reproducible. "
2014,How do API changes trigger stack overflow discussions? a study on the Android SDK,"Mario Linares-Vásquez, Gabriele Bavota, Massimiliano Di Penta, Rocco Oliveto, Denys Poshyvanyk",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597155," The growing number of questions related to mobile development in StackOverflow highlights an increasing interest of software developers in mobile programming. For the Android platform, 213,836 questions were tagged with Android-related labels in StackOverflow between July 2008 and August 2012. This paper aims at investigating how changes occurring to Android APIs trigger questions and activity in StackOverflow, and whether this is particularly true for certain kinds of changes. Our findings suggest that Android developers usually have more questions when the behavior of APIs is modified. In addition, deleting public methods from APIs is a trigger for questions that are (i) more discussed and of major interest for the community, and (ii) posted by more experienced developers. In general, results of this paper provide important insights about the use of social media to learn about changes in software ecosystems, and establish solid foundations for building new recommenders for notifying developers/managers about important changes and recommending them relevant crowdsourced solutions "
2014,Towards more accurate content categorization of API discussions,"Bo Zhou, Xin Xia, David Lo, Cong Tian, Xinyu Wang",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597142," Nowadays, software developers often discuss the usage of various APIs in online forums. Automatically assigning pre-defined semantic categorizes to API discussions in these forums could help manage the data in online forums, and assist developers to search for useful information. We refer to this process as content categorization of API discussions. To solve this problem, Hou and Mo proposed the usage of naive Bayes multinomial, which is an effective classification algorithm.   In this paper, we propose a Cache-bAsed compoSitE algorithm, short formed as CASE, to automatically categorize API discussions. Considering that the content of an API discussion contains both textual description and source code, CASE has 3 components that analyze an API discussion in 3 different ways: text, code, and original. In the text component, CASE only considers the textual description; in the code component, CASE only considers the source code; in the original component, CASE considers the original content of an API discussion which might include textual description and source code. Next, for each component, since different terms (i.e., words) have different affinities to different categories, CASE caches a subset of terms which have the highest affinity scores to each category, and builds a classifier based on the cached terms. Finally, CASE combines all the 3 classifiers to achieve a better accuracy score. We evaluate the performance of CASE on 3 datasets which contain a total of 1,035 API discussions. The experiment results show that CASE achieves accuracy scores of 0.69, 0.77, and 0.96 for the 3 datasets respectively, which outperforms the state-of-the-art method proposed by Hou and Mo by 11%, 10%, and 2%, respectively. "
2014,CODES: mining source code descriptions from developers discussions,"Carmine Vassallo, Sebastiano Panichella, Massimiliano Di Penta, Gerardo Canfora",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597799," Program comprehension is a crucial activity, preliminary to any software maintenance task. Such an activity can be difficult when the source code is not adequately documented, or the documentation is outdated. Differently from the many existing software re-documentation approaches, based on different kinds of code analysis, this paper describes CODES (mining sourCe cOde Descriptions from developErs diScussions), a tool which applies a ""social'' approach to software re-documentation. Specifically, CODES extracts candidate method documentation from StackOverflow discussions, and creates Javadoc descriptions from it. We evaluated CODES to mine Lucene and Hibernate method descriptions. The results indicate that CODES is able to extract descriptions for 20% and 28% of the Lucene and Hibernate methods with a precision of 84% and 91% respectively. "
2014,Condensing class diagrams by analyzing design and network metrics using optimistic classification,"Ferdian Thung, David Lo, Mohd Hafeez Osman, Michel R. V. Chaudron",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597157," A class diagram of a software system enhances our ability to understand software design. However, this diagram is often unavailable. Developers usually reconstruct the diagram by reverse engineering it from source code. Unfortunately, the resultant diagram is often very cluttered; making it difficult to learn anything valuable from it. Thus, it would be very beneficial if we are able to condense the reverse- engineered class diagram to contain only the important classes depicting the overall design of a software system. Such diagram would make program understanding much easier. A class can be important, for example, if its removal would break many connections between classes. In our work, we estimate this kind of importance by using design (e.g., number of attributes, number of dependencies, etc.) and network metrics (e.g., betweenness centrality, closeness centrality, etc.). We use these metrics as features and input their values to our optimistic classifier that will predict if a class is important or not. Different from standard classification, our newly proposed optimistic classification technique deals with data scarcity problem by optimistically assigning labels to some of the unlabeled data and use them for training a better statistical model. We have evaluated our approach to condense reverse-engineered diagrams of 9 software systems and compared our approach with the state-of-the-art work of Osman et al. Our experiments show that our approach can achieve an average Area Under the Receiver Operating Characteristic Curve (AUC) score of 0.825, which is a 9.1% improvement compared to the state-of-the-art approach. "
2014,An information visualization feature model for supporting the selection of software visualizations,"Renan Vasconcelos, Marcelo Schots, Cláudia Werner",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597796," Software development comprises the execution of a variety of tasks, such as bug discovery, finding reusable assets, dependency analysis etc. A better understanding of the task at hand and its surroundings can improve the development performance in general. Software visualizations can support such understanding by addressing different issues according to the necessity of stakeholders. However, knowing which visualizations better fit a given task in progress is not a trivial skill. In this sense, a feature model, intended for organizing the knowledge of a given domain and allowing the reuse of components, can support the identification, categorization and selection of information visualization elements. This work presents an ongoing domain analysis performed for building an information visualization feature model, whose goal is to support the process of choosing and building proper, suitable software visualizations. "
2014,Enabling integrated development environments with natural user interface interactions,"Denis Delimarschi, George Swartzendruber, Huzefa Kagdi",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597791, The paper introduces the concept of applying Natural User Interface (NUI) interactions in the context of Integrated Development Environments (IDEs). Human voice and gestures are mapped to several IDE commends. A prototype tool is developed using the Microsoft Kinect hardware sensors and the available software development kits for Microsoft Visual Studio. A pilot study was conducted to assess the developed prototype. The results of the study suggest that it might be possible to apply natural interactions to a range of IDE capabilities. 
2014,"Amalgamating source code authors, maintainers, and change proneness to triage change requests","Md Kamal Hossen, Huzefa Kagdi, Denys Poshyvanyk",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597147," The paper presents an approach, namely iMacPro, to recommend developers who are most likely to implement incoming change requests. iMacPro amalgamates the textual similarity between the given change request and source code, change proneness information, authors, and maintainers of a software system. Latent Semantic Indexing (LSI) and a lightweight analysis of source code, and its commits from the software repository, are used. The basic premise of iMacPro is that the authors and maintainers of the relevant source code, which is change prone, to a given change request are most likely to best assist with its resolution. iMacPro unifies these sources in a unique way to perform its task, which was not investigated and reported in the literature previously.   An empirical study on three open source systems, ArgoUML, JabRef, and jEdit , was conducted to assess the effectiveness of iMacPro. A number of change requests from these systems were used in the evaluated benchmark. Recall values for top one, five, and ten recommended developers are reported. Furthermore, a comparative study with a previous approach that uses the source-code authorship information for developer recommendation was performed. Results show that iMacPro could provide recall gains from 30% to 180% over its subjected competitor with statistical significance. "
2014,Mining unit tests for code recommendation,"Mohammad Ghafari, Carlo Ghezzi, Andrea Mocci, Giordano Tamburrelli",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597789," Developers spend a significant portion of their time understanding and learning the correct usage of the APIs of libraries they want to integrate in their projects. However, learning how to effectively use APIs is complex and time consuming. Code recommendation systems play a crucial role facilitating developers in this task by providing to them relevant examples while they code. This paper proposes a novel approach to code recommendation in which code examples are automatically obtained by mining and manipulating unit tests. In this paper we discuss the theoretical and practical implications that underpin this idea. The discussion leads to a series of fascinating research challenges that we organized in a research agenda. "
2014,Recommending automated extract method refactorings,"Danilo Silva, Ricardo Terra, Marco Tulio Valente",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597141," Extract Method is a key refactoring for improving program comprehension. However, recent empirical research shows that refactoring tools designed to automate Extract Methods are often underused. To tackle this issue, we propose a novel approach to identify and rank Extract Method refactoring opportunities that are directly automated by IDE-based refactoring tools. Our approach aims to recommend new methods that hide structural dependencies that are rarely used by the remaining statements in the original method. We conducted an exploratory study to experiment and define the best strategies to compute the dependencies and the similarity measures used by the proposed approach. We also evaluated our approach in a sample of 81 extract method opportunities generated for JUnit and JHotDraw, achieving a precision of 48% (JUnit) and 38% (JHotDraw). "
2014,Identifying and locating interference issues in PHP applications: the case of WordPress,"Laleh Eshkevari, Giuliano Antoniol, James R. Cordy, Massimiliano Di Penta",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597153," The large success of Content management Systems (CMS) such as WordPress is largely due to the rich ecosystem of themes and plugins developed around the CMS that allows users to easily build and customize complex Web applications featuring photo galleries, contact forms, and blog pages. However, the design of the CMS, the plugin-based architecture, and the implicit characteristics of the programming language used to develop them (often PHP), can cause interference or unwanted side effects between the resources declared and used by different plugins. This paper describes the problem of interference between plugins in CMS, specifically those developed using PHP, and outlines an approach combining static and dynamic analysis to detect and locate such interference. Results of a case study conducted over 10 WordPress plugins shows that the analysis can help to identify and locate plugin interference, and thus be used to enhance CMS quality assurance. "
2014,Prioritizing maintainability defects based on refactoring recommendations,"Daniela Steidl, Sebastian Eder",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597805," As a measure of software quality, current static code analyses reveal thousands of quality defects on systems in brown-field development in practice. Currently, there exists no way to prioritize among a large number of quality defects and developers lack a structured approach to address the load of refactoring. Consequently, although static analyses are often used, they do not lead to actual quality improvement. Our approach recommends to remove quality defects, exemplary code clones and long methods, which are easy to refactor and, thus, provides developers a first starting point for quality improvement. With an empirical industrial Java case study, we evaluate the usefulness of the recommendation based on developers’ feedback. We further quantify which external factors influence the process of quality defect removal in industry software development. "
2014,How the evolution of emerging collaborations relates to code changes: an empirical study,"Sebastiano Panichella, Gerardo Canfora, Massimiliano Di Penta, Rocco Oliveto",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597145," Developers contributing to open source projects spontaneously group into ""emerging'' teams, reflected by messages exchanged over mailing lists, issue trackers and other communication means. Previous studies suggested that such teams somewhat mirror the software modularity. This paper empirically investigates how, when a project evolves, emerging teams re-organize themselves-e.g., by splitting or merging. We relate the evolution of teams to the files they change, to investigate whether teams split to work on cohesive groups of files. Results of this study-conducted on the evolution history of four open source projects, namely Apache httpd, Eclipse JDT, Netbeans, and Samba-provide indications of what happens in the project when teams reorganize. Specifically, we found that emerging team splits imply working on more cohesive groups of files and emerging team merges imply working on groups of files that are cohesive from structural perspective. Such indications serve to better understand the evolution of software projects. More important, the observation of how emerging teams change can serve to suggest software remodularization actions. "
2014,On the effect of code regularity on comprehension,"Ahmad Jbara, Dror G. Feitelson",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597140," It is naturally easier to comprehend simple code relative to complicated code. Regrettably, there is little agreement on how to effectively measure code complexity. As a result simple generalpurpose metrics are often used, such as lines of code (LOC), Mc- Cabe’s cyclomatic complexity (MCC), and Halstead’s metrics. But such metrics just count syntactic features, and ignore details of the code’s global structure, which may also have an effect on understandability. In particular, we suggest that code regularity—where the same structures are repeated time after time—may significantly reduce complexity, because once one figures out the basic repeated element it is easier to understand additional instances. We demonstrate this by controlled experiments where subjects perform cognitive tasks on different versions of the same basic function. The results indicate that versions with significant regularity lead to better comprehension, while taking similar time, despite being longer and having higherMCC. These results indicate that regularity is another attribute of code that should be taken into account in the context of studying the code’s complexity and comprehension. Moreover, the fact that regularity may compensate for LOC and MCC demonstrates that complexity cannot be decomposed into independently addable contributions by individual attributes. "
2014,Capturing software traceability links from developers' eye gazes,"Braden Walters, Timothy Shaffer, Bonita Sharif, Huzefa Kagdi",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597795, The paper presents a novel approach for recovering software traceability links from developers' eye gazes. An eye tracker is used to capture eye gazes while developers perform software maintenance tasks within the Eclipse IDE. An algorithm is presented that establishes a set of traceability links from the eye-gaze data of several developer sessions. A preliminary study assesses the feasibility and validity of the approach. The links generated by the approach were validated by another set of developers. Results indicate that our algorithm achieves strong recall when developers accurately perform bug-localization tasks. 
2014,Comprehension support during knowledge transitions: learning from field,"Vikrant Kaulgud, Annervaz K. M., Janardan Misra, Gary Titus",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597804," Knowledge Transition (KT) of legacy applications is a critical activity, often determining the quality of maintenance in the early stages of a maintenance life-cycle. We developed an integrated reverse engineering tool-suite that bootstraps the KT process by providing knowledge recipients insights to application structure, quality and functionality. The tool-suite is based on an in-depth study with KT practitioners and a comparative study of existing tools. We evaluated the benefits of the tool-suite during KT in real-life projects. In this talk, we report our learning from the study and evaluation phases. "
2014,A visualization tool recording historical data of program comprehension tasks,"Katsuhisa Maruyama, Takayuki Omori, Shinpei Hayashi",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597802," Software visualization has become a major technique in program comprehension. Although many tools visualize the structure, behavior, and evolution of a program, they have no concern with how a tool user has understood it. Moreover, they miss the stuff the user has left through trial-and-error processes of his/her program comprehension task. This paper presents a source code visualization tool called CodeForest. It uses a forest metaphor to depict source code of Java programs. Each tree represents a class within the program and the collection of trees constitutes a three-dimensional forest. CodeForest helps a user to try a large number of combinations of mapping of software metrics on visual parameters. Moreover, it provides two new types of support: leaving notes that memorize the current understanding and insight along with visualized objects, and automatically recording a user's actions under understanding. The left notes and recorded actions might be used as historical data that would be hints accelerating the current comprehension task. "
2014,An empirical comparison of static and dynamic type systems on API usage in the presence of an IDE: Java vs. groovy with eclipse,"Pujan Petersen, Stefan Hanenberg, Romain Robbes",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597152," Several studies have concluded that static type systems offer an advantage over dynamic type systems for programming tasks involving the discovery of a new API. However, these studies did not take into account modern IDE features; the advanced navigation and code completion techniques available in modern IDEs could drastically alter their conclusions. This study describes an experiment that compares the usage of an unknown API using Java and Groovy using the IDE Eclipse. It turns out that the previous finding that static type systems improve the usability of an unknown API still holds, even in the presence of a modern IDE. "
2014,What is the foundation of evidence of human factors decisions in language design? an empirical study on programming language workshops,"Andreas Stefik, Stefan Hanenberg, Mark McKenney, Anneliese Andrews, Srinivas Kalyan Yellanki, Susanna Siebert",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597154," In recent years, the programming language design community has engaged in rigorous debate on the role of empirical evidence in the design of general purpose programming languages. Some scholars contend that the language community has failed to embrace a form of evidence that is non-controversial in other disciplines (e.g., medicine, biology, psychology, sociology, physics, chemistry), while others argue that a science of language design is unrealistic. While the discussion will likely persist for some time, we begin here a systematic evaluation of the use of empirical evidence with human users, documenting, paper-by-paper, the evidence provided for human factors decisions, beginning with 359 papers from the workshops PPIG, Plateau, and ESP. This preliminary work provides the following contributions: an analysis of the 1) overall quantity and quality of empirical evidence used in the workshops, and of the 2) overall significant challenges to reliably coding academic papers. We hope that, once complete, this long-term research project will serve as a practical catalog designers can use when evaluating the impact of a language feature on human users. "
2014,"Domain matters: bringing further evidence of the relationships among anti-patterns, application domains, and quality-related metrics in Java mobile apps","Mario Linares-Vásquez, Sam Klock, Collin McMillan, Aminata Sabané, Denys Poshyvanyk, Yann-Gaël Guéhéneuc",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597144," Some previous work began studying the relationship between application domains and quality, in particular through the prevalence of code and design smells (e.g., anti-patterns). Indeed, it is generally believed that the presence of these smells degrades quality but also that their prevalence varies across domains. Though anecdotal experiences and empirical evidence gathered from developers and researchers support this belief, there is still a need to further deepen our understanding of the relationship between application domains and quality. Consequently, we present a large-scale study that investigated the systematic relationships between the presence of smells and quality-related metrics computed over the bytecode of 1,343 Java Mobile Edition applications in 13 different application domains. Although, we did not find evidence of a correlation between smells and quality- related metrics, we found (1) that larger differences exist between metric values of classes exhibiting smells and classes without smells and (2) that some smells are commonly present in all the domains while others are most prevalent in certain domains "
2014,SCQAM: a scalable structured code quality assessment method for industrial software,"Shrinath Gupta, Himanshu Kumar Singh, Radhika D. Venkatasubramanyam, Umesh Uppili",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597806," Siemens, Corporate Technology, Development Center, Asia Australia (CT DC AA) has been developing and maintaining several software projects for the Industry, Energy, Healthcare, and Infrastructure & Cities sectors of Siemens. The critical nature of these projects necessitates a high level of software code quality. As part of the code quality program at CT DC AA the strategy is to have a scalable method towards identification of issues affecting code quality of projects across the organization. Traditionally, code quality experts in Siemens used EMISQ method to assess code quality. EMISQ requires about three person months (two experts for six weeks) for 50-100 kLoC, making it effort intensive and time consuming. Thus, scaling this assessment method to include the hundreds of projects in CT DC AA poses many challenges. To address this, we have developed a lightweight assessment method called SCQAM (Structured Code Quality Assessment Method). SCQAM is an expert-based method wherein manual assessment of code quality by experts is directed by the systematic application of code analysis tools. In this paper, we describe the SCQAM method, experiences in applying it to projects in CT DC AA, challenges faced and initiatives taken to enable fixing of systemic issues reported by assessments. The insights from our SCQAM experience can provide useful pointers to other organizations and practitioners interested in assessment and improvement of software code quality. "
2014,Repeatedly-executed-method viewer for efficient visualization of execution paths and states in Java,"Toshinori Matsumura, Takashi Ishio, Yu Kashima, Katsuro Inoue",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597803," The state of a program at runtime is useful information for developers to understand a program. Omniscient debugging and logging-based tools enable developers to investigate the state of a program at an arbitrary point of time in an execution. While these tools are effective to analyze the state at a single point of time, they might be insufficient to understand the generic behavior of a method which includes various control-flow paths. In this paper, we propose REMViewer (Repeatedly-Executed-Method Viewer), or a tool that visualizes multiple execution paths of a Java method. The tool shows each execution path in a separated view so that developers can firstly select actual execution paths of interest and then compare the state of local variables in the paths. "
2014,A formal evaluation of DepDegree based on weyuker's properties,"Dirk Beyer, Peter Häring",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597794," Complexity of source code is an important characteristic that software engineers aim to quantify using static software measurement. Several measures used in practice as indicators for software complexity have theoretical flaws. In order to assess the quality of a software measure, Weyuker established a set of properties that an indicator for program-code complexity should satisfy. It is known that several well-established complexity indicators do not fulfill Weyuker's properties. As an ``early achievement'' in a larger project on evaluating software measures, we show that DepDegree, a measure for data-flow dependencies, satisfies all of Weyuker's properties. "
2014,Hey! are you committing tangled changes?,"Hiroyuki Kirinuki, Yoshiki Higo, Keisuke Hotta, Shinji Kusumoto",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597798," Although there is a principle that states a commit should only include changes for a single task, it is not always respected by developers. This means that code repositories often include commits that contain tangled changes. The presence of such tangled changes hinders analyzing code repositories because most mining software repository (MSR) approaches are designed with the assumption that every commit includes only changes for a single task. In this paper, we propose a technique to inform developers that they are in the process of committing tangled changes. The proposed technique utilizes the changes included in the past commits to judge whether a given commit includes tangled changes. If it determines that the proposed commit may include tangled changes, it offers suggestions on how the tangled changes can be split into a set of untangled changes. "
2014,A semiautomated method for classifying program analysis rules into a quality model,"Shrinath Gupta, Himanshu Kumar Singh",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597808," Most of the software code quality assessment and monitoring methods uses Quality Model (QM) as an aid to capture quality requirements of the software. An important aspect concerning use of QM is classification of Program Analysis (PA) rules into QM according to their relevance to quality attributes such as maintainability, reliability etc. Currently such classification is performed manually by experts and most of the PA tools (such as FxCop for C#, FindBugs for Java, PC-Lint for C/C++) support hundreds of PA rules. Hence performing classification manually can be very effort intensive and time consuming and can lead to concerns like subjectivity and inconsistency. Hence we propose a light weight semiautomated method to expedite classification and make classification activity less effort intensive. Proposed classifier is based on natural language processing (NLP) techniques and uses a keyword matching algorithm. We have computed precision and recall for such a classifier. We have also shown results from applying technique on classifying rules from FxCop, PC-Lint, and FindBugs into the EMISQ QM. We believe that proposed approach will significantly help in reducing the time required to perform classification and hence also to incorporate newer PA tools and rules into QM based methods. "
2014,An approach for evaluating and suggesting method names using n-gram models,"Takayuki Suzuki, Kazunori Sakamoto, Fuyuki Ishikawa, Shinichi Honiden",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597797," Method names are important for the software development process. It has been shown by some studies that the quality of method names affects software comprehension. In response, some approaches that evaluate comprehensibility of method names have been proposed. However, the effectiveness of existing approaches is limited because they focus on part of names.   To deal with the limitation, we propose a novel approach for evaluating comprehensibility of method names and suggesting comprehensible method names using n-gram models. We implemented a prototype tool and conducted two experiments as a case study. Our experiments show that our approach can correctly evaluate 75% method names and successfully suggest 92% actual third words of method names. "
2014,Cross-language bug localization,"Xin Xia, David Lo, Xingen Wang, Chenyi Zhang, Xinyu Wang",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597788," Bug localization refers to the process of identifying source code files that contain defects from textual descriptions in bug reports. Existing bug localization techniques work on the assumption that bug reports, and identifiers and comments in source code files, are written in the same language (i.e., English). However, software users from non-English speaking countries (e.g., China) often use their native languages (e.g., Chinese) to write bug reports. For this setting, existing studies on bug localization would not work as the terms that appear in the bug reports do not appear in the source code. We refer to this problem as cross-language bug localization. In this paper, we propose a cross-language bug localization algorithm named CrosLocator, which is based on language translation.   Since different online translators (e.g., Google and Microsoft translators) have different translation accuracies for various texts, CrosLocator uses multiple translators to convert a non-English textual description of a bug report into English -- each bug report would then have multiple translated versions. For each translated version, CrosLocator applies a bug localization technique to rank source code files. Finally, CrosLocator combines the multiple ranked lists of source code files. Our preliminary experiment on Ruby-China shows that CrosLocator could achieve mean reciprocal rank (mrr) and mean average precision (map) scores of up to 0.146 and 0.116, which outperforms a baseline approach by an average of 10% and 12% respectively. "
2014,Automatic documentation generation via source code summarization of method context,"Paul W. McBurney, Collin McMillan",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597149," A documentation generator is a programming tool that creates documentation for software by analyzing the statements and comments in the software's source code. While many of these tools are manual, in that they require specially-formatted metadata written by programmers, new research has made inroads towards automatic generation of documentation. These approaches work by stitching together keywords from the source code into readable natural language sentences. These approaches have been shown to be effective, but carry a key limitation: the generated documents do not explain the source code's context. They can describe the behavior of a Java method, but not why the method exists or what role it plays in the software. In this paper, we propose a technique that includes this context by analyzing how the Java methods are invoked. In a user study, we found that programmers benefit from our generated documentation because it includes context information. "
2014,Improving topic model source code summarization,"Paul W. McBurney, Cheng Liu, Collin McMillan, Tim Weninger",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597793," In this paper, we present an emerging source code summarization technique that uses topic modeling to select keywords and topics as summaries for source code. Our approach organizes the topics in source code into a hierarchy, with more general topics near the top of the hierarchy. In this way, we present the software's highest-level functionality first, before lower-level details. This is an advantage over previous approaches based on topic models, that only present groups of related keywords without a hierarchy. We conducted a preliminary user study that found our approach selects keywords and topics that the participants found to be accurate in a majority of cases. "
2014,A code obfuscation framework using code clones,"Aniket Kulkarni, Ravindra Metta",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597807," IT industry loses tens of billions of dollars annually from security attacks such as malicious reverse engineering. To protect sensitive parts of software from such attacks, we designed a code obfuscation scheme based on nontrivial code clones. While implementing this scheme, we realized that currently there is no framework to assist implementation of such advanced obfuscation techniques. Therefore, we have developed a framework to support code obfuscation using code clones. We could successfully implement our obfuscation technique using this framework in Java. In this paper, we present our framework and illustrate it with an example. "
2014,JCSD: visual support for understanding code control structure,"Ahmad Jbara, Dror G. Feitelson",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597801," Program comprehension is a vital mental process in any maintenance activity. It becomes decisive as functions get larger. Such functions are burdened with very many programming constructs as lines of code (LOC) strongly correlate with the McCabe’s cyclomatic complexity (MCC). This makes it hard to capture the whole code of such functions and as a result hinders grasping their structural properties that might be essential for maintenance. Program visualization is known as a key solution that assists in comprehending complex systems. As a matter of fact we have shown, in a recent work, that control structure diagrams (CSD) could be useful to better understand and discover structural properties of such functions. For example, we found that the code regularity property, and even cloning, can be easily identified by CSDs. This paper presents JCSD, which is an Eclipse plug-in that implements CSD diagrams for Java methods. In particular it visualizes the control structure and nesting of a Java method, and by this it easily conveys structural characteristics of the code to the programmer and helps him to better understand and refactor. "
2014,Plagiarism detection for multithreaded software based on thread-aware software birthmarks,"Zhenzhou Tian, Qinghua Zheng, Ting Liu, Ming Fan, Xiaodong Zhang, Zijiang Yang",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597143," The availability of inexpensive multicore hardware presents a turning point in software development. In order to benefit from the continued exponential throughput advances in new processors, the software applications must be multithreaded programs. As multithreaded programs become increasingly popular, plagiarism of multithreaded programs starts to plague the software industry. Although there has been tremendous progress on software plagiarism detection technology, existing dynamic approaches remain optimized for sequential programs and cannot be applied to multithreaded programs without significant redesign. This paper fills the gap by presenting two dynamic birthmark based approaches. The first approach extracts key instructions while the second approach extracts system calls. Both approaches consider the effect of thread scheduling on computing software birthmarks. We have implemented a prototype based on the Pin instrumentation framework. Our empirical study shows that the proposed approaches can effectively detect plagiarism of multithread programs and exhibit strong resilience to various semantic-preserving code obfuscations. "
2014,Redacting sensitive information in software artifacts,"Mark Grechanik, Collin McMillan, Tathagata Dasgupta, Denys Poshyvanyk, Malcom Gethers",http://dl.acm.org/http://dx.doi.org/10.1145/2597008.2597138," In the past decade, there have been many well-publicized cases of source code leaking from different well-known companies. These leaks pose a serious problem when the source code contains sensitive information encoded in its identifier names and comments. Unfortunately, redacting the sensitive information requires obfuscating the identifiers, which will quickly interfere with program comprehension. Program comprehension is key for programmers in understanding the source code, so sensitive information is often left unredacted.   To address this problem, we offer a novel approach for REdacting Sensitive Information in Software arTifacts (RESIST). RESIST finds and replaces sensitive words in software artifacts in such a way to reduce the impact on program comprehension. We evaluated RESIST experimentally using 57 professional programmers from over a dozen different organizations. Our evaluation shows that RESIST effectively redacts software artifacts, thereby making it difficult for participants to infer sensitive information, while maintaining a desired level of comprehension. "
2013,Improving program comprehension by answering questions (keynote),Brad A. Myers,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613827
2013,Part-of-speech tagging of program identifiers for improved text-based software engineering tools,"Samir Gupta, Sana Malik, Lori Pollock, K. Vijay-Shanker",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613828
2013,Evaluating source code summarization techniques: Replication and expansion,"Brian P. Eddy, Jeffrey A. Robinson, Nicholas A. Kraft, Jeffrey C. Carver",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613829
2013,Automatic generation of natural language summaries for Java classes,"Laura Moreno, Jairo Aponte, Giriprasad Sridhara, Andrian Marcus, Lori Pollock, K. Vijay-Shanker",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613830
2013,An empirical study on the efficiency of graphical vs. textual representations in requirements comprehension,"Zohreh Sharafi, Alessandro Marchetto, Angelo Susi, Giuliano Antoniol, Yann-Gaal Gueheneuc",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613831
2013,SArF map: Visualizing software architecture from feature and layer viewpoints,"Kenichi Kobayashi, Manabu Kamimura, Keisuke Yano, Koki Kato, Akihiko Matsuo",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613832
2013,Multiscale visual comparison of execution traces,"Jonas Trumper, Jurgen Dollner, Alexandru Telea",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613833
2013,In situ understanding of performance bottlenecks through visually augmented code,"Fabian Beck, Oliver Moseler, Stephan Diehl, Gunter Daniel Rey",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613834
2013,Monitoring user interactions for supporting failure reproduction,"Tobias Roehm, Nigar Gurbanova, Bernd Bruegge, Christophe Joubert, Walid Maalej",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613835
2013,Quality analysis of source code comments,"Daniela Steidl, Benjamin Hummel, Elmar Juergens",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613836
2013,Gapped code clone detection with lightweight source code analysis,"Hiroaki Murakami, Keisuke Hotta, Yoshiki Higo, Hiroshi Igaki, Shinji Kusumoto",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613837
2013,Insight into a method co-change pattern to identify highly coupled methods: An empirical study,"Manishankar Mondal, Chanchal K. Roy, Kevin A. Schneider",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613838
2013,Patterns of cross-language linking in java frameworks,"Philip Mayer, Andreas Schroeder",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613839
2013,Using code ownership to improve IR-based Traceability Link Recovery,"Diana Diaz, Gabriele Bavota, Andrian Marcus, Rocco Oliveto, Silvia Takahashi, Andrea De Lucia",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613840
2013,Structural information based term weighting in text retrieval for feature location,"Blake Bassett, Nicholas A. Kraft",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613841
2013,Extracting problematic API features from forum discussions,"Yingying Zhang, Daqing Hou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613842
2013,Multi-dimensional exploration of API usage,"Coen De Roover, Ralf Lammel, Ekaterina Pek",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613843
2013,Evaluating software clustering algorithms in the context of program comprehension,"Anas Mahmoud,  Nan Niu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613844
2013,On the accuracy of Architecture Compliance Checking support Accuracy of dependency analysis and violation reporting,"Leo Pruijt, Christian Koppe, Sjaak Brinkkemper",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613845
2013,Building extensions for applications: Towards the understanding of extension possibilities,"Mohamed Aly, Anis Charfi, Mira Mezini",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613846
2013,On the understanding of programs with continuous code reviews,"Mario Bernhart, Thomas Grechenig",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613847
2013,Applying clone change notification system into an industrial development process,"Yuki Yamanaka, Eunjong Choi, Norihiro Yoshida, Katsuro Inoue, Tateki Sano",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613848
2013,Manhattan: Supporting real-time visual team activity awareness,"Michele Lanza, Marco D'Ambros, Alberto Bacchelli, Lile Hattori, Francesco Rigotti",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613849
2013,"Blogging developer knowledge: Motivations, challenges, and future directions","Chris Parnin, Christoph Treude, Margaret-Anne Storey",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613850
2013,Towards generating human-oriented summaries of unit test cases,"Manabu Kamimura, Gail C. Murphy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613851
2013,Towards a unified software attack model to assess software protections,"Cataldo Basile, Mariano Ceccato",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613852
2013,Improving the detection accuracy of evolutionary coupling,"Manishankar Mondal, Chanchal K. Roy, Kevin A. Schneider",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613853
2013,Agec: An execution-semantic clone detection tool,Toshihiro Kamiya,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613854
2013,JSummarizer: An automatic generator of natural language summaries for Java classes,"Laura Moreno, Andrian Marcus, Lori Pollock, K. Vijay-Shanker",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613855
2013,OnionUML: An Eclipse plug-in for visualizing UML class diagrams in onion graph notation,"Michael Falcone, Bonita Sharif",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613856
2013,SimCad: An extensible and faster clone detection tool for large scale software systems,"Md. Sharif Uddin, Chanchal K. Roy, Kevin A. Schneider",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6613857
2012,Agile software assessment (Invited paper),"Nierstrasz, O. ; Lungu, M.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240507,"Informed decision making is a critical activity in software development, but it is poorly supported by common development environments, which focus mainly on low-level programming tasks. We posit the need for agile software assessment, which aims to support decision making by enabling rapid and effective construction of software models and custom analyses. Agile software assessment entails gatheri..."
2012,Studying developers for fun and profit: (Keynote abstract),"DeLine, Robert",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240478,"Summary form only given. NCsoft Corporation is a leading global developer and publisher of online games. Founded in 1997 by Taek Jin Kim, NCsoft is home to the critically acclaimed Aion, Lineage, Guild Wars, City of Heroes franchises and numerous Casual Games. With offices in North America, United Kingdom, Japan, Taiwan and Thailand, NCsoft aims at providing fun to everyone, everywhere in the worl..."
2012,A retrospective view on: The role of concepts in program comprehension: (MIP award),"Rajlich, V. ; Wilde, N.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240480,"This retrospective briefly recapitulates highlights of the original paper that was published at IWPC 2002. Then it overviews research directions of the last 10 years: research in tools and techniques of concept location a that aim to support software developer, research of integrated model of software change, creation of software engineering course that emphasizes the role of software developer in..."
2012,Program complexity metrics and programmer opinions,"Katzmarski, B. ; Koschke, R.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240486,Various program complexity measures have been proposed to assess maintainability. Only relatively few empirical studies have been conducted to back up these assessments through empirical evidence. Researchers have mostly conducted controlled experiments or correlated metrics with indirect maintainability indicators such as defects or change frequency. This paper uses a different approach. We inves...
2012,Women and men — Different but equal: On the impact of identifier style on source code reading,"Sharafi, Z. ; Soh, Z. ; Gueheneuc, Y. ; Antoniol, G.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240505,"Program comprehension is preliminary to any program evolution task. Researchers agree that identifiers play an important role in code reading and program understanding activities. Yet, to the best of our knowledge, only one work investigated the impact of gender on the memorability of identifiers and thus, ultimately, on program comprehension. This paper reports the results of an experiment involv..."
2012,A lightweight visualization of interprocedural data-flow paths for source code reading,"Ishio, T. ; Etsuda, S. ; Inoue, K.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240506,"To understand the behavior of a program, developers must read source code fragments in various modules. For developers investigating data-flow paths among modules, a call graph is too abstract since it does not visualize how parameters of method calls are related to each other. On the other hand, a system dependence graph is too fine-grained to investigate interprocedural data-flow paths. In this ..."
2012,Is the derivation of a model easier to understand than the model itself?,"Feigenspan, J. ; Batory, D. ; Riche, T.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240508,"Software architectures can be presented by graphs with components as nodes and connectors as edges. These graphs, or models, typically encode expert domain knowledge, which makes them difficult to understand. Hence, instead of presenting a complete complex model, we can derive it from a simple, easy-to-understand model by a set of easy-to-understand transformations. In two controlled experiments, ..."
2012,Evaluating forum discussions to inform the design of an API critic,"Rupakheti, C.R. ; Daqing Hou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240509,"Learning to use a software framework and its API (Application Programming Interfaces) can be a major endeavor for novices. To help, we have built a critic to advise the use of an API based on the formal semantics of the API. Specifically, the critic offers advice when the symbolic state of the API client code triggers any API usage rules. To assess to what extent our critic can help solve practica..."
2012,Mining source code descriptions from developer communications,"Panichella, S. ; Aponte, J. ; Di Penta, M. ; Marcus, A. ; Canfora, G.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240510,"Very often, source code lacks comments that adequately describe its behavior. In such situations developers need to infer knowledge from the source code itself or to search for source code descriptions in external artifacts. We argue that messages exchanged among contributors/developers, in the form of bug reports and emails, are a useful source of information to help understanding source code. Ho..."
2012,Measuring programming experience,"Feigenspan, J. ; Kastner, C. ; Liebig, J. ; Apel, S. ; Hanenberg, S.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240511,"Programming experience is an important confounding parameter in controlled experiments regarding program comprehension. In literature, ways to measure or control programming experience vary. Often, researchers neglect it or do not specify how they controlled it. We set out to find a well-defined understanding of programming experience and a way to measure it. From published comprehension experimen..."
2012,High-MCC functions in the Linux kernel,"Jbara, A. ; Matan, A. ; Feitelson, D.G.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240512,"McCabe's Cyclomatic Complexity (MCC) is a widely used metric for the complexity of control flow. Common usage decrees that functions should not have an MCC above 50, and preferably much less. However, the Linux kernel includes more than 800 functions with MCC values above 50, and over the years 369 functions have had an MCC of 100 or more. Moreover, some of these functions undergo extensive evolut..."
2012,Understanding registration-based abstractions: A quantitative user study,"Nunez, J.-J. ; Kiczales, G.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240513,The adoption of programming language innovation is impeded because all program processing tools in the tool chain must support any new or altered language features. Registration-based abstractions (RBAs) were proposed to address this difficulty by allowing the editor to transiently superimpose new language abstractions on existing code. Individual programmers can choose where and when to see a new...
2012,Concern-based cohesion: Unveiling a hidden dimension of cohesion measurement,"Silva, B. ; Sant'Anna, C. ; Chavez, C. ; Garcia, A.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240476,"Cohesion has been avidly recognized as a key property of software modularity. Ideally, a software module is considered to be cohesive if it represents an abstraction of a single concern of the software. Modules with several concerns may be harder to understand because developers must mentally separate the source code related to each concern. Also, modules implementing several concerns are more lik..."
2012,Understanding reuse in the Android Market,"Ruiz, I.J.M. ; Nagappan, M. ; Adams, B. ; Hassan, A.E.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240477,"Mobile apps are software products developed to run on mobile devices, and are typically distributed via app stores. The mobile app market is estimated to be worth billions of dollars, with more than hundred of thousands of apps, and still increasing in number. This explosion of mobile apps is astonishing, given the short time span that they have been around. One possible explanation for this explo..."
2012,Programmer information needs after memory failure,"Parnin, C. ; Rugaber, S.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240479,"Despite its vast capacity and associative powers, the human brain does not deal well with interruptions. Particularly in situations where information density is high, such as during a programming task, recovering from an interruption requires extensive time and effort. Although modern program development environments have begun to recognize this problem, none of these tools take into account the b..."
2012,Identifying computational phases from inter-process communication traces of HPC applications,"Alawneh, L. ; Hamou-Lhadj, A.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240481,"Understanding the behaviour of High Performance Computing (HPC) systems is a challenging task due to the large number of processes they involve as well as the complex interactions among these processes. In this paper, we present a novel approach that aims to simplify the analysis of large execution traces generated from HPC applications. We achieve this through a technique that allows semiautomati..."
2012,Tracking and visualizing information flow in component-based systems,"Yazdanshenas, A.R. ; Moonen, L.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240482,"Component-based software engineering is aimed at managing the complexity of large-scale software development by composing systems from reusable parts. In order to understand or validate the behavior of a given system, one needs to acquire understanding of the components involved in combination with understanding how these components are instantiated, initialized and interconnected in the particula..."
2012,Do static type systems improve the maintainability of software systems? An empirical study,"Kleinschmager, S. ; Hanenberg, S. ; Robbes, R. ; Tanter, E. ; Stefik, A.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240483,"Static type systems play an essential role in contemporary programming languages. Despite their importance, whether static type systems influence human software development capabilities remains an open question. One frequently mentioned argument for static type systems is that they improve the maintainability of software systems - an often used claim for which there is no empirical evidence. This ..."
2012,Professional status and expertise for UML class diagram comprehension: An empirical study,"Soh, Z. ; Sharafi, Z. ; Van den Plas, B. ; Porras, G.C. ; Gueheneuc, Y. ; Antoniol, G.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240484,"Professional experience is one of the most important criteria for almost any job offer in software engineering. Professional experience refers both to professional status (practitioner vs. student) and expertise (expert vs. novice). We perform an experiment with 21 subjects including both practitioners and students, and experts and novices. We seek to understand the relation between the speed and ..."
2012,Modeling the ownership of source code topics,"Corley, C.S. ; Kammer, E.A. ; Kraft, N.A.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240485,"Exploring linguistic topics in source code is a program comprehension activity that shows promise in helping a developer to become familiar with an unfamiliar software system. Examining ownership in source code can reveal complementary information, such as who to contact with questions regarding a source code entity, but the relationship between linguistic topics and ownership is an unexplored are..."
2012,A semantic relatedness approach for traceability link recovery,"Mahmoud, A. ; Nan Niu ; Songhua Xu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240487,"Human analysts working with automated tracing tools need to directly vet candidate traceability links in order to determine the true traceability information. Currently, human intervention happens at the end of the traceability process, after candidate traceability links have already been generated. This often leads to a decline in the results' accuracy. In this paper, we propose an approach, base..."
2012,Using IR methods for labeling source code artifacts: Is it worthwhile?,"De Lucia, A. ; Di Penta, M. ; Oliveto, R. ; Panichella, A. ; Panichella, S.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240488,"Information Retrieval (IR) techniques have been used for various software engineering tasks, including the labeling of software artifacts by extracting “keywords” from them. Such techniques include Vector Space Models, Latent Semantic Indexing, Latent Dirichlet Allocation, as well as customized heuristics extracting words from specific source code elements. This paper investigates ho..."
2012,"A TraceLab-based solution for creating, conducting, and sharing feature location experiments","Dit, B. ; Moritz, E. ; Poshyvanyk, D.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240489,"Similarly to other fields in software engineering, the results of case studies involving feature location techniques (FLTs) are hard to reproduce, compare, and generalize, due to factors such as, incompatibility of different datasets, lack of publicly available implementation or implementation details, or the use of different metrics for evaluating FLTs. To address these issues, we propose a solut..."
2012,Can clone detection support test comprehension?,"Hauptmann, B. ; Junker, M. ; Eder, S. ; Juergens, E. ; Vaas, R.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240490,"Tests are central artifacts of software systems. Therefore, understanding tests is essential for activities such as maintenance, test automation, and efficient execution. Redundancies in tests may significantly decrease their understandability. Clone detection is a technique to find similar parts in software artifacts. We suggest using this technique to gain a better understanding of tests and to ..."
2012,A controlled experiment on software clones,"Harder, J. ; Tiarks, R.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240491,"Most software systems contain sections of duplicated source code - clones - that are believed to make maintenance more difficult. Recent studies tested this assumption by retrospective analyses of software archives. While giving important insights, the analysis of historical data relies only on snapshots and misses the human interaction in between. We conducted a controlled experiment to investiga..."
2012,Code querying by UML,"Noguera, C. ; De Roover, C. ; Kellens, A. ; Jonckers, V.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240492,"The need to identify source code that exhibits particular characteristics is essential to program comprehension. In this paper we introduce Arabica, a tool for querying Java code using UML class and sequence diagrams. Our use of UML diagrams avoids the need for developers to familiarize themselves with yet another language. In contrast to tools that rely on dedicated query languages, Arabica encod..."
2012,CriticAL: A critic for APIs and libraries,"Rupakheti, C.R. ; Daqing Hou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240493,"It is well-known that APIs can be hard to learn and use. Although search tools can help find related code examples, API novices still face other significant challenges such as evaluating the relevance of the search results. To help address the broad problems of finding, understanding, and debugging API-based solutions, we have built a critic system that offers recommendations, explanations, and cr..."
2012,Supporting comprehension experiments with human subjects,"Feigenspan, J. ; Siegmund, N.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240494,"Experiments with human subjects become more and more important in software engineering. To support planning, conducting, and replicating experiments targeting program comprehension, we developed PROPHET. It allows experimenters to easily define and customize experimental settings as well as to export settings such that others can replicate their results. Furthermore, PROPHET provides extension poi..."
2012,SeByte: A semantic clone detection tool for intermediate languages,"Keivanloo, I. ; Roy, C.K. ; Rilling, J.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240495,SeByte is a semantic clone detection tool which accepts Java bytecode (binary) as input. SeByte provides a complementary approach to traditional pattern-based source code level clone detection. It is capable of detecting clones missed by existing clone detection tools since it exploits both pattern and content similarity at binary level.
2012,CRat: A refactoring support tool for Form Template Method,"Hotta, K. ; Higo, Y. ; Igaki, H. ; Kusumoto, S.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240496,"Refactoring is important for efficient software maintenance. However, manual operations for refactoring are complicated, and human-related errors easily occur. Tool support can help users to apply such a complicated refactoring. This paper proposes a refactoring support tool with Form Template Method pattern. The developed tool automatically identifies method pairs that can be refactored with Form..."
2012,Toward structured location of features,"Kazato, H. ; Hayashi, S. ; Okada, S. ; Miyata, S. ; Hoshino, T. ; Saeki, M.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240497,"This paper proposes structured location, a semiautomatic technique and its supporting tool both for locating features and exposing their structures in source code, using a combination of dynamic analysis, sequential pattern mining and formal concept analysis."
2012,Extraction and improvement of conditionally compiled product line code,Bo Zhang,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240498,"Conditional Compilation (CC) is one of the most widely used variation mechanisms in the development of software product lines (SPLs). However, a problem in SPL maintenance is that conditionally compiled code blocks are often overly scattered, nested, and tangled, which makes the code difficult to understand. Moreover, if variant code is evolved independently of the corresponding variability model,..."
2012,Applying bioinformatics in the analysis of software variants,"Tenev, V.L. ; Duszynski, S.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240499,"Analysis of software similarity is a lively research topic, particularly in the context of software maintenance and software reuse. There exist several approaches to detecting similar code inside one software system and across many systems. While working on similarity analysis of software variants, we observed many analogies between the approaches for analyzing evolution of software and of biologi..."
2012,Parallel code clone detection using MapReduce,"Sajnani, H. ; Ossher, J. ; Lopes, C.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240500,"Code clone detection is an established topic in software engineering research. Many detection algorithms have been proposed and refined but very few exploit the inherent parallelism present in the problem, making large scale code clone detection difficult. To alleviate this shortcoming, we present a new technique to efficiently perform clone detection using the popular MapReduce paradigm. Prelimin..."
2012,Automatic software architecture recovery: A machine learning approach,"Sajnani, H.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240501,"Automatically recovering functional architecture of the software can facilitate the developer's understanding of how the system works. In legacy systems, original source code is often the only available source of information about the system and it is very time consuming to understand source code. Current architecture recovery techniques either require heavy human intervention or fail to recover q..."
2012,Toward an effective automated tracing process,"Mahmoud, A.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240502,The research on automated tracing has noticeably advanced in the past few years. Various methodologies and tools have been proposed in the literature to provide automatic support for establishing and maintaining traceability information in software systems. This movement is motivated by the increasing attention traceability has been receiving as a de jure standard in software quality assurance. Fo...
2012,Characterization of the Linux configuration system,"Jbara, A.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240503,"Variability in software systems is often expressed using the C pre-processor (CPP). However, CPP has been identified as problematic. We argue that CPP is not as bad as its reputation suggests, and indeed many large systems use it effectively. We perform a deep analysis of the Linux configuration options, and find significant inconsistencies between the source code and the configuration control sys..."
2012,Leveraging clone detection for Internet-scale source code search,"Keivanloo, I.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6240504,"Different approaches to search for source code on the Internet exist. In this paper, we propose techniques that support a special type of Internet-scale code search using two novel syntactical and semantic clone search and detection methods. The syntactical search focuses on providing a scalable real-time engine, while the semantic clone detection is being used to enrich our knowledge base during ..."
2011,Clustering Support for Static Concept Location in Source Code,"Giuseppe Scanniello, Andrian Marcus",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=13
2011,Can Better Identifier Splitting Techniques Help Feature Location?,"Bogdan Dit, Latifa Guerrouj, Denys Poshyvanyk, Giuliano Antoniol",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=47
2011,Improving IR-based Traceability Recovery Using Smoothing Filters,"Andrea De Lucia, Massimiliano Di Penta, Rocco Oliveto, Annibale Panichella, Sebastiano Panichella",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=34
2011,The Influence of the Task on Programmer Behaviour,"Annie T.T. Ying, Martin P. Robillard",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=35
2011,Precise and Scalable Querying of Syntactical Source Code Patterns Using Sample Code Snippets and a Database,"Oleksandr Panchenko, Jan Karstens, Hasso Plattner, Alexander Zeier",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=31
2011,Is Aspect-Oriented Programming a Rewarding Investment into Future Code Changes? A Socio-technical Study on Development and Maintenance Time,"Stefan Endrikat, Stefan Hanenberg",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=46
2011,SmartGroups: Focusing on Task-Relevant Source Artifacts in IDEs,"David Röthlisberger, Oscar Nierstrasz, Stéphane Ducasse",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=20
2011,Generating Parameter Comments and Integrating with Method Summaries,"Giriprasad Sridhara, Lori Pollock, K. Vijay-Shanker",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=28
2011,Design Defects Detection and Correction by Example,"Marouane Kessentini, Wael Kessentini, Houari Sahraoui, Mounir Boukadoum, Ali Ouni",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=22
2011,Obstacles in Using Frameworks and APIs: An Exploratory Study of Programmers' Newsgroup Discussions,"Daqing Hou, Lin Li",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=21
2011,Collective Code Bookmarks for Program Comprehension,"Anja Guzzi, Lile Hattori, Michele Lanza, Martin Pinzger, Arie van Deursen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=19
2011,Trust-Based Requirements Traceability,"Nasir Ali, Yann-Gaël Guéhéneuc, Giuliano Antoniol",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=42
2011,AspectMaps: A Scalable Visualization of Join Point Shadows,"Johan Fabry, Andy Kellens, Stéphane Ducasse",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=11
2011,Reasoning about Faults in Aspect-Oriented Programs: A Metrics-Based Evaluation,"Rachel Burrows, François Taïani, Alessandro Garcia, Fabiano Cutigi Ferrari",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=30
2011,Comparison of a Visual and a Textual Notation to Express Data Constraints in Aspect-Oriented Join Point Selections: A Controlled Experiment,"Dominik Stein, Stefan Hanenberg",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=9
2011,Exploring Large-Scale System Similarity Using Incremental Clone Detection and Live Scatterplots,James R. Cordy,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=25
2011,Software Evolution Comprehension: Replay to the Rescue,"Lile Hattori, Marco D'Ambros, Michele Lanza, Mircea Lungu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=39
2011,Feature Profiling for Evolving Systems,"Elmar Juergens, Martin Feilkas, Markus Herrmannsdoerfer, Florian Deissenboeck, Rudolf Vaas, Karl-Heinz Prommer",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=12
2011,MTF: A Scalable Exchange Format for Traces of High Performance Computing Systems,"Luay Alawneh, Abdelwahab Hamou-Lhadj",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=15
2011,A Lightweight Approach to Uncover Technical Artifacts in Unstructured Data,"Nicolas Bettenburg, Bram Adams, Ahmed E. Hassan, Michel Smidt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=36
2011,On Visualization and Comprehension of Scenario-Based Programs,"Nir Eitan, Michal Gordon, David Harel, Assaf Marron, Gera Weiss",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=10
2011,Faceted Navigation for Software Exploration,"Nan Niu, Anas Mahmoud, Xiaoyong Yang",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=18
2011,Subvocalization - Toward Hearing the Inner Thoughts of Developers,Chris Parnin,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=49
2011,Adding Process Metrics to Enhance Modification Complexity Prediction,"Gabriella Tóth, ÁdÂ´m ZoltÂ´n Végh, ÁrpÂ´d Beszédes, Tibor Gyimóthy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=41
2011,Capturing Expert Knowledge for Automated Configuration Fault Diagnosis,"Mengliao Wang, Xiaoyu Shi, Kenny Wong",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=24
2011,Change Impact Analysis: An Earthquake Metaphor,"Salima Hassaine, Ferdaous Boughanmi, Yann-Gaël Guéhéneuc, Sylvie Hamel, Giuliano Antoniol",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=54
2011,Programming from the Reader's Perspective: Toward an Expectations Approach,"Gayani Samaraweera, Macneil Shonle, John Quarles",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=32
2011,Toward Intuitive Programming Languages,"Andreas Stefik, Susanna Siebert, Kim Slattery, Melissa Stefik",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=33
2011,Industrial Case Study on Supporting the Comprehension of System Behaviour under Load,"Mark D. Syer, Bram Adams, Ahmed E. Hassan",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=38
2011,DebCheck: Efficient Checking for Open Source Code Clones in Software Systems,"James R. Cordy, Chanchal K. Roy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=27
2011,The NiCad Clone Detector,"James R. Cordy, Chanchal K. Roy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=26
2011,Anomaly Detection by Monitoring Filesystem Activities,"Liang Huang, Kenny Wong",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=23
2011,SeClone - A Hybrid Approach to Internet-Scale Real-Time Code Clone Search,"Iman Keivanloo, Juergen Rilling, Philippe Charland",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=29
2011,The Concept of Stratified Sampling of Execution Traces,"Heidar Pirzadeh, Sara Shanian, Abdelwahab Hamou-Lhadj, Ali Mehrabian",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=17
2011,Industrial Program Comprehension Challenge 2011: Archeology and Anthropology of Embedded Control Systems,"Andrew Begel, Jochen Quante",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=50
2011,Trustrace: Improving Automated Trace Retrieval through Resource Trust Analysis,Nasir Ali,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=55
2011,On the Effect of the Query in IR-based Concept Location,"Sonia Haiduc, Andrian Marcus",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=48
2011,Scalable Automatic Concept Mining from Execution Traces,Soumaya Medini,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=44
2011,An Empirical Study of the Impacts of Clones in Software Maintenance,"Manishankar Mondal, Md. Saidur Rahman, Ripon K. Saha, Chanchal K. Roy, Jens Krinke, Kevin A. Schneider",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=14
2011,Towards a Benchmark and Automatic Calibration for IR-Based Concept Location,"Scott David Ohlemacher, Andrian Marcus",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=56
2011,Satisfying Programmers' Information Needs in API-Based Programming,"Chandan Raj Rupakheti, Daqing Hou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=16
2011,A Systematic Analysis of Software Architecture Visualization Techniques,Zohreh Sharafi,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=40
2011,Context and Vision: Studying Two Factors Impacting Program Comprehension,Zéphyrin Soh,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=37
2011,Modeling Framework API Evolution as a Multi-objective Optimization Problem,Wei Wu,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=43
2011,Conflict-Aware Optimal Scheduling of Code Clone Refactoring: A Constraint Programming Approach,"Minhaz F. Zibran, Chanchal K. Roy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=45
2010,"Case Study of Feature Location Using Dependence Graph, after 10 Years","Kunrong Chen, Václav Rajlich",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=40
2010,Automatic Extraction of a WordNet-Like Identifier Network from Software,"J.-R. Falleri, M. Huchard, M. Lafourcade, C. Nebut, V. Prince, M. Dao",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=12
2010,Using Data Fusion and Web Mining to Support Feature Location in Software,"Meghan Revelle, Bogdan Dit, Denys Poshyvanyk",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=10
2010,Extracting Source Code from E-Mails,"Alberto Bacchelli, Marco D'Ambros, Michele Lanza",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=47
2010,Visual Support for Understanding Product Lines,"Janet Feigenspan, Christian Kästner, Mathias Frisch, Raimund Dachselt, Sven Apel",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=15
2010,Patrools: Visualizing the Polymorphic Usage of Class Hierarchies,Petru Florin Mihancea,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=35
2010,Renaming Parts of Identifiers Consistently within Code Clones,"Patricia Jablonski, Daqing Hou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=23
2010,DepDigger: A Tool for Detecting Complex Low-Level Dependencies,"Dirk Beyer, Ashgan Fararooy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=52
2010,CheckDep: A Tool for Tracking Software Dependencies,"Dirk Beyer, Ashgan Fararooy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=51
2010,Featureous: A Tool for Feature-Centric Analysis of Java Software,"Andrzej Olszak, Bo Nørregaard Jørgensen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=27
2010,DynaRIA: A Tool for Ajax Web Application Comprehension,"Domenico Amalfitano, Anna Rita Fasolino, Armando Polcaro, Porfirio Tramontana",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=16
2010,The ConAn Tool to Identify Crosscutting Concerns in Object Oriented Systems,"Mario Luca Bernardi, Giuseppe Antonio Di Lucca",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=34
2010,Unibench: A Tool for Automated and Collaborative Benchmarking,"Daniel Rolls, Carl Joslin, Sven-Bodo Scholz",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=36
2010,Recovering Traceability Links between Business Process and Software System Components,"Lerina Aversano, Fiammetta Marulli, Maria Tortorella",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=54
2010,Multi-touch for Software Exploration,"Sandro Boccuzzo, Harald C. Gall",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=30
2010,Towards Developing a Meta-model for Comprehending Software Adaptability,"Mehdi Amoui, Sen Li, Edson A. Oliveira Jr., Ladan Tahvildari",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=50
2010,Sound as an Aid in Understanding Low-Level Program Architecture,Lewis Berman,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=55
2010,"SVS, BORS, SVSi: Three Strategies to Relate Problem and Program Domains","Mario M. Berón, Maria João V. Pereira, Nuno Oliveira, Daniela da Cruz",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=24
2010,Contract-Based Slicing Helps on Safety Reuse,"Sérgio Areias, Daniela da Cruz, Jorge Sousa Pinto",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=44
2010,On the Comparability of Software Clustering Algorithms,"Mark Shtern, Vassilios Tzerpos",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=25
2010,On the Equivalence of Information Retrieval Methods for Automated Traceability Link Recovery,"Rocco Oliveto, Malcom Gethers, Denys Poshyvanyk, Andrea De Lucia",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=20
2010,Recognizing Sorting Algorithms with the C4.5 Decision Tree Classifier,Ahmad Taherkhani,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=11
2010,A Technique for Just-in-Time Clone Detection in Large Scale Systems,"Liliane Barbour, Hao Yuan, Ying Zou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=13
2010,A Simple and Effective Measure for Complex Low-Level Dependencies,"Dirk Beyer, Ashgan Fararooy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=49
2010,Understanding and Auditing the Licensing of Open Source Software Distributions,"Daniel M. German, Massimiliano Di Penta, Julius Davies",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=48
2010,Utilizing Web Search Engines for Program Analysis,"Daniel Ratiu, Lars Heinemann",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=26
2010,"Vivisection of a Non-Executable, Domain-Specific Language - Understanding (the Usage of) the P3P Language","Ralf Lämmel, Ekaterina Pek",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=45
2010,Visualizing the Results of Field Testing,"Brian Chan, Ying Zou, Ahmed E. Hassan, Anand Sinha",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=9
2010,Studying the Impact of Social Structures on Software Quality,"Nicolas Bettenburg, Ahmed E. Hassan",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=46
2010,An Exploratory Study of Factors Influencing Change Entropy,"Gerardo Canfora, Luigi Cerulo, Massimiliano Di Penta, Francesco Pacilio",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=32
2010,Exploring the Relationships between Design Metrics and Package Understandability: A Case Study,Mahmoud O. Elish,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=43
2010,Measuring Class Importance in the Context of Design Evolution,"Maen Hammad, Michael L. Collard, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=31
2010,A Cognitive Model for Software Architecture Complexity,"Eric Bouwers, Joost Visser, Carola Lilienthal, Arie van Deursen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=28
2010,Natural Language Parsing of Program Element Names for Concept Extraction,"Surafel Lemma Abebe, Paolo Tonella",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=29
2010,Identification of Idiom Usage in C++ Generic Libraries,"Andrew Sutton, Ryan Holeman, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=37
2010,Aiding Software Maintenance with Copy-and-Paste Clone-Awareness,"Patricia Jablonski, Daqing Hou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=22
2010,Using the Kleinberg Algorithm and Vector Space Model for Software System Clustering,"Giuseppe Scanniello, Anna D'Amico, Carmela D'Amico, Teodora D'Amico",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=17
2010,From Program Comprehension to People Comprehension,Andrew Begel,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=42
2010,Influence of Synchronized Domain Visualizations on Program Comprehension,"Nuno Oliveira, Maria João Varanda Pereira, Daniela da Cruz, Mario Berón",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=21
2010,An Eye Tracking Study on camelCase and under_score Identifier Styles,"Bonita Sharif, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=41
2010,My Repository Runneth Over: An Empirical Study on Diversifying Data Sources to Improve Feature Search,"Sukanya Ratanotayanon, Hye Jung Choi, Susan Elliott Sim",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=33
2010,Connecting Traces: Understanding Client-Server Interactions in Ajax Applications,"Nick Matthijssen, Andy Zaidman, Margaret-Anne Storey, Ian Bull, Arie van Deursen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=14
2009,Intensions are a key to program comprehension.,Václav Rajlich,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090022
2009,Variable granularity for improving precision of impact analysis.,"Maksym Petrenko, Václav Rajlich",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090023
2009,Automatically identifying changes that impact code-to-design traceability.,"Maen Hammad, Michael L. Collard, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090024
2009,Automatic classication of large changes into maintenance categories.,"Abram Hindle, Daniel M. Germán, Michael W. Godfrey, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090025
2009,A plethora of paths.,Eric Larson,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090026
2009,Practical static analysis for inference of security-related program properties.,"Yin Liu, Ana Milanova",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090027
2009,Impact analysis and visualization toolkit for static crosscutting in AspectJ.,"Dehua Zhang, Ekwa Duala-Ekoko, Laurie J. Hendren",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090028
2009,BugFix: A learning-based tool to assist developers in fixing bugs.,"Dennis Jeffrey, Min Feng, Neelam Gupta, Rajiv Gupta",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090029
2009,Resumption strategies for interrupted programming tasks.,"Chris Parnin, Spencer Rugaber",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090030
2009,Using activity traces to characterize programming behaviour beyond the lab.,"Gail C. Murphy, Petcharat Viriyakattiyaporn, David C. Shepherd",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090031
2009,An in-vivo study of the cognitive levels employed by programmers during software maintenance.,"Tara Kelly, Jim Buckley",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090032
2009,Trace visualization for program comprehension: A controlled experiment.,"Bas Cornelissen, Andy Zaidman, Arie van Deursen, Bart Van Rompaey",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090033
2009,Using spoken text to aid debugging: An empirical study.,"Andreas Stefik, Ed Gellenbeck",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090034
2009,Sonification design guidelines to enhance program comprehension.,"Khaled Hussein, Eli Tilevich, Ivica Ico Bukvic, SooBeen Kim",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090035
2009,Instrumenting time-sensitive software for feature location.,"Dennis Edwards, Norman Wilde, Sharon Simmons, Eric Golden",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090036
2009,Crosscutting patterns and design stability: An exploratory analysis.,"Eduardo Figueiredo, Bruno Carreiro da Silva, Cláudio Sant'Anna, Alessandro F. Garcia, Jon Whittle, Daltro José Nunes",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090037
2009,On the role of the nouns in IR-based traceability recovery.,"Giovanni Capobianco, Andrea De Lucia, Rocco Oliveto, Annibale Panichella, Sebastiano Panichella",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090038
2009,To camelcase or under_score.,"David Binkley, Marcia Davis, Dawn Lawrie, Christopher Morrell",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090039
2009,Reading the documentation of invoked API functions in program comprehension.,"Uri Dekel, James D. Herbsleb",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090040
2009,The effectiveness of source code obfuscation: An experimental assessment.,"Mariano Ceccato, Massimiliano Di Penta, Jasvir Nagra, Paolo Falcarin, Filippo Ricca, Marco Torchiano, Paolo Tonella",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090041
2009,The loss of architectural knowledge during system evolution: An industrial case study.,"Martin Feilkas, Daniel Ratiu, Elmar Jürgens",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090042
2009,Dn-based architecture assessment of Java Open Source software systems.,"Alexander Serebrenik, Serguei A. Roubtsov, Mark van den Brand",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090043
2009,Standing on the shoulders of giants - A data fusion approach to design pattern detection.,"Günter Kniesel, Alexander Binun",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090044
2009,An exploratory study on assessing feature location techniques.,"Meghan Revelle, Denys Poshyvanyk",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090045
2009,Natural language parsing for fact extraction from source code.,"Jens Nilsson, Welf Löwe, Johan Hall, Joakim Nivre",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090046
2009,An empirical exploration of regularities in open-source software lexicons.,"Derrin Pierret, Denys Poshyvanyk",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090047
2009,Vector space analysis of software clones.,"Scott Grant, James R. Cordy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090048
2009,CnP: Towards an environment for the proactive management of copy-and-paste programming.,"Daqing Hou, Patricia Jablonski, Ferosh Jacob",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090049
2009,Syntax tree fingerprinting for source code similarity detection.,"Michel Chilowicz, Étienne Duris, Gilles Roussel",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090050
2009,Methods for selecting and improving software clustering algorithms.,"Mark Shtern, Vassilios Tzerpos",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090051
2009,Supporting task-oriented navigation in IDEs with configurable HeatMaps.,"David Röthlisberger, Oscar Nierstrasz, Stéphane Ducasse, Damien Pollet, Romain Robbes",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090052
2009,A case for concept programs.,"Reinhard Schauer, Rudolf K. Keller",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090053
2009,Profile-based type reconstruction for decompilation.,"Katerina Troshina, Alexander Chernov, Alexander Fokin",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090054
2009,An empirical study on the comprehension of stereotyped UML class diagram layouts.,"Bonita Sharif, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090055
2009,Who can help me with this change request?,"Huzefa H. Kagdi, Denys Poshyvanyk",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090056
2009,Working session: Using eye-tracking to understand program comprehension.,"Yann-Gaël Guéhéneuc, Huzefa H. Kagdi, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090057
2009,TDD = too dumb developers? Implications of Test-Driven Development on maintainability and comprehension of software.,"Marco Torchiano, Alberto Sillitti",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090058
2009,OGAN: Visualizing object interaction scenarios based on dynamic interaction context.,"Munakata Satoshi, Takashi Ishio, Katsuro Inoue",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090059
2009,CRISTA: A tool to support code comprehension based on visualization and reading technique.,"Daniel Porto, Manoel G. Mendonça, Sandra Camargo Pinto Ferraz Fabbri",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090060
2009,Kenyon-web: Reconfigurable web-based feature extractor.,"Sunghun Kim, Shivkumar Shivaji, E. James Whitehead Jr.",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090061
2009,Prototyping synchronization policies for existing programs.,"Yi Huang, Laura K. Dillon, R. E. Kurt Stirewalt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090062
2009,Proposing a visual approach to support the characterization of software comprehension activities.,"Glauco de Figueiredo Carneiro, Manoel G. Mendonça, Rodrigo Chaves Magnavita",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090063
2009,SODBeans.,"Andreas Stefik, Andrew Haywood, Shahzada Mansoor, Brock Dunda, Daniel Garcia",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090064
2009,Design pattern directed clustering for understanding open source code.,"Zhixiong Han, Linzhang Wang, Liqian Yu, Xin Chen, Jianhua Zhao, Xuandong Li",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090065
2009,A bug you like: A framework for automated assignment of bugs.,"Olga Baysal, Michael W. Godfrey, Robin Cohen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090066
2009,Creating task-based concern maps by merging concern fragments.,"Sukanya Ratanotayanon, Susan Elliott Sim",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090067
2009,Towards pie tree visualization of graphs and large software architectures.,"Mireille Samia, Michael Leuschel",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090068
2009,Structure transition graphs: An ECG for program comprehension?,"Susan Elliott Sim, Sukanya Ratanotayanon, Leyna Cotran",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090069
2009,Enabling more precise dependency analysis in event-based systems.,"Daniel Popescu, Joshua Garcia, Nenad Medvidovic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090070
2009,Observation of Open Source programmers' information seeking.,"Khaironi Yatim Sharif, Jim Buckley",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090071
2009,Creating and maintaining tutorials with DEFT.,Andreas Bartho,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090072
2009,Improving program comprehension by enhancing program constructs: An analysis of the Umple language.,"Andrew Forward, Timothy C. Lethbridge, Dusan Brestovansky",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090073
2009,Capturing Java naming conventions with first-order Markov models.,"Erik Linstead, Lindsey Hughes, Cristina Videira Lopes, Pierre Baldi",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090074
2009,Automatic detection of internal queues and stages in message processing systems.,"Suman Karumuri, Steven P. Reiss",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090075
2009,TaskBoard: Tracking pertinent task artifacts and plans.,"Chris Parnin, Carsten Görg, Spencer Rugaber",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090076
2009,Representing source code with Granular hierarchical structures.,"Benjapol Auprasert, Yachai Limpiyakorn",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5090077
2008,Scalable Program Comprehension for Analyzing Complex Defects,Suraj C. Kothari,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=44
2008,The Reuse of Grammars with Embedded Semantic Actions,Terence Parr,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=36
2008,Partial Domain Comprehension in Software Evolution and Maintenance,"Maksym Petrenko, V?clav Rajlich, Radu Vanciu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=14
2008,Refining Existing Theories of Program Comprehension During Maintenance for Concurrent Software,"Scott D. Fleming, Eileen Kraemer, R. E. K. Stirewalt, Laura K. Dillon, Shaohua Xie",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=40
2008,Identifying Architectural Change Patterns in Object-Oriented Systems,"Xinyi Dong, Michael W. Godfrey",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=19
2008,A Toolkit for Visualizing the Runtime Behavior of TinyOS Applications,"Andrew R. Dalton, Jason O. Hallstrom",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=22
2008,"CERBERUS: Tracing Requirements to Source Code Using Information Retrieval, Dynamic Analysis, and Program Analysis","Marc Eaddy, Alfred V. Aho, Giuliano Antoniol, Yann-Ga? Gu?h?neuc",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=39
2008,Exploiting Runtime Information in the IDE,"David R?thlisberger, Orla Greevy, Oscar Nierstrasz",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=32
2008,Do Dynamic Object Process Graphs Support Program Understanding? - A Controlled Experiment.,Jochen Quante,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=15
2008,Impact of Limited Memory Resources,"Dave Binkley, Dawn Lawrie, Steve Maex, Christopher Morrell",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=31
2008,Data Model Comprehension: An Empirical Comparison of ER and UML Class Diagrams,"Andrea De Lucia, Carmine Gravino, Rocco Oliveto, Genoveffa Tortora",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=26
2008,A Traceability Technique for Specifications,"Aharon Abadi, Mordechai Nisenson, Yahalomit Simionovici",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=30
2008,On the Use of Domain Terms in Source Code,"Sonia Haiduc, Andrian Marcus",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=29
2008,Identifying Word Relations in Software: A Comparative Study of Semantic Similarity Tools,"Giriprasad Sridhara, Emily Hill, Lori Pollock, K. Vijay-Shanker",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=18
2008,Reading Beside the Lines: Indentation as a Proxy for Complexity Metric,"Abram Hindle, Michael W. Godfrey, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=13
2008,"Mendel: A Model, Metrics, and Rules to Understand Class Hierarchies","Simon Denier, Yann-Ga? Gu?h?neuc",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=37
2008,Scenario-Based Comparison of Clone Detection Techniques,"Chanchal K. Roy, James R. Cordy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=42
2008,Combining Preprocessor Slicing with C/C++ Language Slicing,"L?szl? Vid?cs, Judit J?sz, ?rp? Besz?des, Tibor Gyim?thy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=33
2008,NICAD: Accurate Detection of Near-Miss Intentional Clones Using Flexible Pretty-Printing and Code Normalization,"Chanchal K. Roy, James R. Cordy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=41
2008,What's a Typical Commit? A Characterization of Open Source Software Repositories,"Abdulkareem Alali, Huzefa Kagdi, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=24
2008,Assessing Software Archives with Evolutionary Clusters,"Adam Vanya, Lennart Hofland, Steven Klusener, Pi?rre van de Laar, Hans van Vliet",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=34
2008,Reusing Program Investigation Knowledge for Code Understanding,"Martin P. Robillard, Putra Manggala",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=10
2008,Automated Identification of Tasks in Development Sessions,"Irina Diana Coman, Alberto Sillitti",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=16
2008,Re-Engineering a Reverse Engineering Portal to a Distributed SOA,"William M. Mongan, Maxim Shevertalov, Spiros Mancoridis",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=17
2008,Checklist Inspections and Modifications: Applying Bloom's Taxonomy to Categorise Developer Comprehension,"David Andrew McMeekin, Brian R. von Konsky, Elizabeth Chang, David J. A. Cooper",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=20
2008,Aspect Mining in Procedural Object Oriented Code,"Muhammad Usman Bhatti, St?phane Ducasse, Awais Rashid",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=45
2008,An Approach for Mapping Features to Code Based on Static and Dynamic Analysis,"Abhishek Rohatgi, Abdelwahab Hamou-Lhadj, Juergen Rilling",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=35
2008,Evaluating the Reference and Representation of Domain Concepts in APIs,"Daniel Ratiu, Jan Juerjens",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=11
2008,Ensuring Well-Behaved Usage of APIs through Syntactic Constraints,"Martin Feilkas, Daniel Ratiu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=12
2008,A Tool for Visual Understanding of Source Code Dependencies,"Martin Pinzger, Katja Graefenhain, Patrick Knab, Harald C. Gall",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=23
2008,How to Interconnect Operational and Behavioral Views of Web Applications,"Daniela Carneiro da Cruz, Ruben Filipe Cardoso da Fonseca, Pedro Manuel Rangel Santos Henriques, Maria Jo?o Varanda Pereira",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=25
2008,"Locating and Understanding Features of Complex Software Systems by Synchronizing Time-, Collaboration- and Code-Focused Views on Execution Traces","Johannes Bohnet, Stefan Voigt, Juergen Doellner",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=21
2008,Support for Understanding GUI Programs by Visualizing Execution Traces Synchronized with Screen Transitions,"Tatsuya Sato, Buntarou Shizuki, Jiro Tanaka",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=28
2008,Semantic Technologies in System Maintenance (STSM 2008),"Juergen Rilling, Ren? Witte, Dragan Ga?evic, Jeff Z. Pan",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=38
2008,Industrial Realities of Program Comprehension (IRPC 2008),"Thomas Dean, Joost Visser",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=43
2008,Query Technologies and Applications for Program Comprehension (QTAPC 2008),"Mathieu Verbaere, Michael W. Godfrey, Tudor Girba",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=27
2007,Search Based Software Engineering for Program Comprehension,Mark Harman,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=35
2007,Reducing Program Comprehension Effort in Evolving Software by Recognizing Feature Implementation Convergence,"Jay Kothari, Trip Denton, Ali Shokoufandeh, Spiros Mancoridis",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=33
2007,Recovering Concepts from Source Code with Automated Concept Identification,"Maurice M. Carey, Gerald C. Gannod",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=31
2007,Combining Formal Concept Analysis with Information Retrieval for Concept Location in Source Code,"Denys Poshyvanyk, Andrian Marcus",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=13
2007,Understanding Execution Traces Using Massive Sequence and Circular Bundle Views,"Bas Cornelissen, Danny Holten, Andy Zaidman, Leon Moonen, Jarke J. van Wijk, Arie van Deursen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=39
2007,Tracking Objects to Detect Feature Dependencies,"Adrian Lienhard, Orla Greevy, Oscar Nierstrasz",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=38
2007,WAD: A Feasibility study using the Wicked Audio Debugger,"Andreas Stefik, Roger Alexander, Robert Patterson, Jonathan Brown",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=42
2007,A Hybrid Program Model for Object-Oriented Reverse Engineering,Michael W. Godfrey,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7
2007,From Reality to Programs and (Not Quite) Back Again,"Daniel Ratiu, Florian Deissenboeck",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=22
2007,A Comparative Study of Three Program Exploration Tools,"Brian de Alwis, Gail C. Murphy, Martin P. Robillard",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6
2007,Assessing the Comprehension of UML Class Diagrams via Eye Tracking,"Shehnaaz Yusuf, Huzefa Kagdi, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=10
2007,Empirical Evaluation of a UML Sequence Diagram with Adornments to Support Understanding of Thread Interactions,"Shaohua Xie, Eileen Kraemer, R.E.K. Stirewalt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=19
2007,Detecting Interaction Coupling from Task Interaction Histories,"Lijie Zou, Michael W. Godfrey, Ahmed E. Hassan",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=18
2007,Mining Software Repositories for Traceability Links,"Huzefa Kagdi, Jonathan I. Maletic, Bonita Sharif",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=28
2007,Characterizing and Understanding Development Sessions,"Romain Robbes, Michele Lanza",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=12
2007,Evaluating Aspect Mining Techniques: A Case Study,"Chanchal Kumar Roy, Mohammad Gias Uddin, Banani Roy, Thomas R. Dean",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=21
2007,Using Bayesian Belief Networks to Predict Change Propagation in Software Systems,"Siavash Mirarab, Alaa Hassouna, Ladan Tahvildari",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=41
2007,A Non-conservative Approach to Software Pattern Detection,"Niklas Pettersson, Welf Lowe",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=8
2007,Recovering Workflows from Multi Tiered E-commerce Systems,"Maokeng Hung, Ying Zou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=32
2007,Error Report Driven Post-Mortem Analysis,"Yi Zhang, S. Purushothaman Iyer",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=43
2007,Interactive Views to Improve the Comprehension of UML Models - An Experimental Validation,"Christian F.J. Lange, Michel R.V. Chaudron",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=23
2007,Program Comprehension through Software Habitability,"Richard Wettel, Michele Lanza",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=30
2007,Scenario Explorer: Interactive Visualization of Use Cases,"Rogardt Heldal, Jenny Samuelsson, Ola Sundin",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=34
2007,Metrics for Measuring the Effectiveness of Decompilers and Obfuscators,"Nomair A. Naeem, Michael Batchelder, Laurie Hendren",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=27
2007,Constructing Usage Scenarios for API Redocumentation,"Juanjuan Jiang, Johannes Koskinen, Anna Ruokonen, Tarja Systa",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=16
2007,Software Comprehension through Concern-based Queries,"Tommi Reinikainen, Imed Hammouda, Juha Laiho, Kai Koskimies, Tarja Systa",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=36
2007,Enforcing Constraints Between Documentary Comments and Source Code,"C. Dylan Shearer, Michael L. Collard",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=20
2007,Designing your Next Empirical Study on Program Comprehension,"Massimiliano Di Penta, R.E.K. Stirewalt, Eileen Kraemer",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=17
2007,Comprehending Aspect-Oriented Programs: Challenges and Open Issues,"Giuseppe A. Di Lucca, Michael Smit, Bruce Fraser, Eleni Stroulia, H. James Hoover",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=14
2007,Lagrein: Visualizing User Requirements and Development Effort,"Andrejs Jermakovics, Marco Scotto, Alberto Sillitti, Giancarlo Succi",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=24
2007,Use of a Genetic Algorithm to Identify Source Code Metrics Which Improves Cognitive Complexity Predictive Models,Rodrigo Vivanco,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=40
2006,What?s in a Name? A Study of Identifiers,"Dawn Lawrie, Christopher Morrell, Henry Feild, David Binkley",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=51
2006,Building Usage Contexts During Program Comprehension,"Chris Parnin, Carsten Gorg",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=14
2006,Digging the Development Dust for Refactorings,"Curtis Schofield, Brendan Tansey, Zhenchang Xing, Eleni Stroulia",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=18
2006,Classifying Change Types for Qualifying Change Couplings,"Beat Fluri, Harald C. Gall",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=16
2006,Studying the Evolution of Software Systems Using Change Clusters,"Jay Kothari, Ali Shokoufandeh, Spiros Mancoridis, Ahmed E. Hassan",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=44
2006,How Developers Copy,"Mihai Balint, Radu Marinescu, Tudor Girba",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=25
2006,A Synergistic Approach to Program Comprehension,"Bradley L. Vinz, Letha H. Etzkorn",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7
2006,How Webmining and Coupling Metrics Improve Early Program Comprehension,"Andy Zaidman, Bart Du Bois, Serge Demeyer",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=26
2006,Programs are Knowledge Bases,"Daniel Ratiu, Florian Deissenboeck",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=41
2006,Dynamic Analysis of Software Systems using Execution Pattern Mining,"Hossein Safyallah, Kamran Sartipi",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=19
2006,Layered Program Auralization: Using Music to Increase Runtime Program Comprehension and Debugging Effectiveness,"Andreas Stefik, Kelly Fitz, Roger Alexander",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=33
2006,Integrating Reverse Engineering Tools Using a Service-Sharing Methodology,"Dean Jin, James R. Cordy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=30
2006,An Architecture to Support Model Driven Software Visualization,"R. Ian Bull, Margaret-Anne Storey, Jean-Marie Favre, Marin Litoiu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=11
2006,Using Abstraction-driven Slicing for Postmortem Analysis of Software,"Raoul Jetley, Yi Zhang, S. Purushothaman Iyer",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=50
2006,Automated Extraction of Database Interactions in Web Applications,"Minh Ngoc Ngo, Hee Beng Kuan Tan, Doanh Trinh",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=13
2006,An Approach for Extracting Workflows from E-Commerce Applications,"Ying Zou, Maokeng Hung",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=9
2006,Combining Probabilistic Ranking and Latent Semantic Indexing for Feature Identification,"Denys Poshyvanyk, Andrian Marcus, Vaclav Rajlich, Yann-Gael Gu?heneuc, Giuliano Antoniol",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=17
2006,Leveraged Quality Assessment using Information Retrieval Techniques,"Dawn J. Lawrie, Henry Feild, David Binkley",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=34
2006,A Metric-Based Heuristic Framework to Detect Object-Oriented Design Flaws,"Mazeiar Salehie, Shimin Li, Ladan Tahvildari",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6
2006,Identification of Design Roles for the Assessment of Design Quality in Enterprise Applications,Cristina Marinescu,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=27
2006,Summarizing the Content of Large Traces to Facilitate the Understanding of the Behaviour of a Software System,"Abdelwahab Hamou-Lhadj, Timothy Lethbridge",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=45
2006,Dynamic Data Structure Analysis for Java Programs,"Sokhom Pheng, Clark Verbrugge",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=20
2006,An Approach to High-Level Behavioral Program Documentation Allowing Lightweight Verification,"Coen De Roover, Isabel Michiels, Kim Gybels, Kris Gybels, Theo D?Hondt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=10
2006,Profile-Based Approach to Support Comprehension of Software Behavior,"Johannes Koskinen, Markus Kettunen, Tarja Systa",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=37
2006,The Sound of Software: Using Sonification to Aid Comprehension,"Lewis Berman, Sebastian Danicic, Keith Gallagher, Nicolas Gold",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=47
2006,Experimental Settings in Program Comprehension: Challenges and Open Issues,"Giuseppe A. Di Lucca, Massimiliano Di Penta",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=23
2006,Working Session: Program Comprehension and Migration Strategies for Web Service and Service-Oriented Architectures,"Dennis Smith, Liam O?Brien, Kostas Kontogiannis",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=52
2006,The Cognitive Assignment Eclipse Plug-in,"Brendan Cleary, Chris Exton",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=46
2006,INFORM: A Framework for Performance Informed Software Development,"Aiden Grandfield, Chris Exton",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=29
2006,Evolution Storyboards: Visualization of Software Structure Dynamics,"Dirk Beyer, Ahmed E. Hassan",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=21
2006,JIRiSS - an Eclipse plug-in for Source Code Exploration,"Denys Poshyvanyk, Andrian Marcus, Yubo Dong",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=32
2006,Alborz: An Interactive Toolkit to Extract Static and Dynamic Views of a Software System,"Kamran Sartipi, Lingdong Ye, Hossein Safyallah",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=8
2006,Fluid Source Code Views,"Michael Desmond, Margaret-Anne Storey, Chris Exton",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=24
2006,JComp: A Reuse-Driven Componentization Framework for Java Applications,"Shimin Li, Ladan Tahvildari",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=31
2006,Understanding Obfuscated Code,"Matias Madou, Ludo Van Put, Koen De Bosschere",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=49
2006,A Context-Aware Analysis Scheme for Bloom's Taxonomy,"Tara Kelly, Jim Buckley",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5
2006,Towards a Client Driven Characterization of Class Hierarchies,Petru Florin Mihancea,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=48
2006,Reverse Engineering Scripting Language Extensions,"Daniel L. Moise, Kenny Wong, H. James Hoover, Daqing Hou",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=42
2006,Can Information Retrieval Techniques Effectively Support Traceability Link Recovery?,"Andrea De Lucia, Fausto Fasano, Rocco Oliveto, Genoveffa Tortora",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=15
2006,Improving Comprehensibility of Source Code via Traceability Information: a Controlled Experiment,"Andrea De Lucia, Rocco Oliveto, Francesco Zurolo, Massimiliano Di Penta",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=28
2006,Programmer-friendly Decompiled Java,"Nomair A. Naeem, Laurie Hendren",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=40
2005,Message from the Chairs., Message from the Chairs. ,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=23
2005,Conference Committees., Conference Committees. ,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=15
2005,Sponsoring Organizations., Sponsoring Organizations. ,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=32
2005,Comprehension by Derivation.,Douglas R. Smith,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=13
2005,A Qualitative Comparison of Three Aspect Mining Techniques.,"Mariano Ceccato, Marius Marin, Kim Mens, Leon Moonen, Paolo Tonella, Tom Tourwé",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=2
2005,Understanding Concerns in Software: Insights Gained from Two Case Studies.,"Meghan Revelle, Tiffany Broadbent, David Coppit",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=43
2005,Static Techniques for Concept Location in Object-Oriented Code.,"Andrian Marcus, Václav Rajlich, Joseph Buchta, Maksym Petrenko, Andrey Sergeyev",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=33
2005,Presenting Micro-Theories of Program Comprehension in Pattern Form.,"Adam Murray, Timothy C. Lethbridge",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=28
2005,An Investigation into Professional Programmers' Mental Representations of Variables.,"Jorma Sajaniemi, Raquel Navarro-Prieto",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=8
2005,An Investigation of Java Abstraction Usage for Program Modifications.,"Pamela O'Shea, Christopher Exton",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=9
2005,Identifying and Addressing Problems in Framework Reuse.,"Douglas Kirk, Marc Roper, Murray Wood",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=21
2005,What Can Programmer Questions Tell Us About Frameworks?,"Daqing Hou, Kenny Wong, H. James Hoover",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=47
2005,Concise and Consistent Naming.,"Florian Deißenböck, Markus Pizka",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=14
2005,Working Session: Textual Views of Source Code to Support Comprehension.,"Anthony Cox, Michael L. Collard",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=49
2005,On the Comprehension of Security Risk Scenarios.,"Ida Hogganvik, Ketil Stølen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=27
2005,Modelling the Information-Seeking Behaviour of Programmers - An Empirical Approach.,"Michael P. O'Brien, Jim Buckley",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=24
2005,A COTS Component Comprehension Process.,"Anneliese Amschler Andrews, Andreas Stefik, Nina Picone, Sudipto Ghosh",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1
2005,The CodeSurfer Software Understanding Platform.,"Paul Anderson, Mark Zarins",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=37
2005,JRipples: A Tool for Program Comprehension during Incremental Change.,"Jonathan Buckner, Joseph Buchta, Maksym Petrenko, Václav Rajlich",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=22
2005,HyperSoft System: Tool Demonstration and Use Example.,Jussi Koskinen,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=20
2005,SEAT: A Usable Trace Analysis Tool.,"Abdelwahab Hamou-Lhadj, Timothy C. Lethbridge, Lianjiang Fu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=30
2005,REGoLive: Web Site Comprehension with Viewpoints.,"Grace Gui, Holger M. Kienle, Hausi A. Müller",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=29
2005,Tool Demonstration: CHET: Checking Specifications in Java Systems.,Steven P. Reiss,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=40
2005,Tool Demonstration: JIVE and JOVE: Java as it Happens.,"Steven P. Reiss, Manos Renieris",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=41
2005,NavTracks: Supporting Navigation in Software.,"Janice Singer, Robert Elves, Margaret-Anne D. Storey",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=25
2005,Browsing Software Architectures With LSEdit.,"Nikita Synytskyy, Richard C. Holt, Ian J. Davis",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=11
2005,"Theories, Methods and Tools in Program Comprehension: Past, Present and Future.",Margaret-Anne D. Storey,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=38
2005,Design and Implementation of an Extensible and Modifiable Refactoring Tool.,"Katsuhisa Maruyama, Shinichiro Yamamoto",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=17
2005,Detecting and Visualizing Refactorings from Software Archives.,"Carsten Görg, Peter Weißgerber",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=18
2005,Understanding Object-Oriented Source Code from the Behavioural Perspective.,"Neil Walkinshaw, Marc Roper, Murray Wood",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=44
2005,"An (Architecture-Centric) Approach for Tracing, Organizing, and Understanding Events in Event-Based Software Architectures.","Scott A. Hendrickson, Eric M. Dashofy, Richard N. Taylor",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6
2005,System Evolution Tracking through Execution Trace Analysis.,"Michael Fischer, Johann Oberleitner, Harald C. Gall, Thomas Gschwind",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=35
2005,Efficient Monitoring and Display of Thread State in Java.,Steven P. Reiss,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=19
2005,Clustering Software Artifacts Based on Frequent Common Changes.,"Dirk Beyer, Andreas Noack",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=12
2005,Software Clustering based on Omnipresent Object Detection.,"Zhihua Wen, Vassilios Tzerpos",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=31
2005,Achieving a Reuse Perspective within a Component Recovery Process: An Industrial Scale Case Study.,"Andrew Le Gear, Jim Buckley, Brendan Cleary, J. J. Collins, Kieran O'Dea",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4
2005,Working Session on Interoperable Reengineering Services.,"Dean Jin, Andreas Winter",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=48
2005,Adding Control-Flow to a Visual Data-Flow Representation.,"David Dearman, Anthony Cox, Maryanne Fisher",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5
2005,Supporting the Evolution of a Software Visualization Tool Through Usability Studies.,"Andrian Marcus, Denise Comorski, Andrey Sergeyev",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=34
2005,On Evaluating the Layout of UML Class Diagrams for Program Comprehension.,"Dabo Sun, Kenny Wong",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=26
2005,An Empirical Study of the Use of Friends in C++ Software.,"Michael English, Jim Buckley, Tony Cahill, Kristian Lynch",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7
2005,Understanding Cloned Patterns in Web Applications.,"Andrea De Lucia, Rita Francese, Giuseppe Scanniello, Genoveffa Tortora",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=42
2005,Visualizing the Behavior of Dynamically Modifiable Code.,"Bradley Dux, Anand Iyer, Saumya K. Debray, David Forrester, Stephen G. Kobourov",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=45
2005,A Small Social History of Software Architecture.,Susan Elliott Sim,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=3
2004,Program Comprehension in Generative Programming: A History of Grand Challenges.,Don S. Batory,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311042
2004,An Empirical Study on Using Stereotypes to Improve Understanding of UML Models.,"Ludwik Kuzniarz, Miroslaw Staron, Claes Wohlin",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311043
2004,Tool-Supported Customization of UML Class Diagrams for Learning Complex System Models.,"Imed Hammouda, Olcay Guldogan, Kai Koskimies, Tarja Systä",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311044
2004,Understanding Class Evolution in Object-Oriented Software.,"Zhenchang Xing, Eleni Stroulia",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311045
2004,A Simple Static Model for Understanding the Dynamic Behavior of Programs.,Pierre Kelsen,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311046
2004,Reuse in Reverse Engineering.,"Thomas Panas, Jonas Lundberg, Welf Löwe",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311047
2004,Working in Pairs as a Means for Design Knowledge Building: An Empirical Study.,"Gerardo Canfora, Aniello Cimitile, Corrado Aaron Visaggio",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311048
2004,Challenges and Requirements for an Effective Trace Exploration Tool.,"Abdelwahab Hamou-Lhadj, Timothy Lethbridge, Lianjiang Fu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311049
2004,Giving Meaning to Macros.,"Christopher A. Mennie, Charles L. A. Clarke",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311050
2004,Building Executable Union Slices using Conditioned Slicing.,"Sebastian Danicic, Andrea De Lucia, Mark Harman",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311051
2004,Architectural Views through Collapsing Strategies.,"Christoph Stoermer, Liam O'Brien, Chris Verhoef",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311052
2004,Understanding CASE Generated Legacy Applications: A Case Study.,"Camilo Sarmiento, Silvia Takahashi",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311053
2004,Understanding Web Applications through Dynamic Analysis.,"Giuliano Antoniol, Massimiliano Di Penta, Michele Zazzara",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311054
2004,Reengineering Web Applications Based on Cloned Pattern Analysis.,"Andrea De Lucia, Rita Francese, Giuseppe Scanniello, Genoveffa Tortora",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311055
2004,Towards a Technique for Reverse Engineering Web Transactions from a User's Perspective.,"Damiano Distante, Tauhida Parveen, Scott R. Tilley",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311056
2004,Program Comprehension for Web Services.,"Nicolas Gold, Keith H. Bennett",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311057
2004,Program Comprehension for the Purpose of Testing.,Harry M. Sneed,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311058
2004,Structural Evolution of an Open Source System: A Case Study.,"Andrea Capiluppi, Maurizio Morisio, Juan F. Ramil",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311059
2004,Using Development History Sticky Notes to Understand Software Architecture.,"Ahmed E. Hassan, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311060
2004,An Effectiveness Measure for Software Clustering Algorithms.,"Zhihua Wen, Vassilios Tzerpos",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311061
2004,An Empirical Study on Keyword-based Web Site Clustering.,"Filippo Ricca, Paolo Tonella, Christian Girardi, Emanuele Pianta",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311062
2004,Data Mining Source Code to Facilitate Program Comprehension: Experiments on Clustering Data Retrieved from C++ Programs.,"Yiannis Kanellopoulos, Christos Tjortjis",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311063
2004,Empirical Assessment of UML Static Object Diagrams.,Marco Torchiano,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311064
2004,On Migrating a Legacy Application to the Palm Platform.,"Andrew Foss, Kenny Wong",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311065
2004,Programming Style Changes in Evolving Source Code.,"Andrew Mohan, Nicolas Gold",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311066
2004,Resolving Linkage Anomalies in Extracted Software System Models.,"Jingwei Wu, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311067
2004,Understanding Modifications in State-Based Models.,"Bogdan Korel, Luay Ho Tahat",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311068
2004,An Eclipse Plug-in for Model Checking.,"Dirk Beyer, Thomas A. Henzinger, Ranjit Jhala, Rupak Majumdar",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311069
2004,Requirements Driven Software Evolution.,"Ladan Tahvildari, Kostas Kontogiannis",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311070
2004,Working Session: Program Comprehension Strategies for Web Service and Service-oriented Architectures.,"Liam O'Brien, Dennis B. Smith",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311071
2004,"Web Services Composition, Execution and Visualization.","Manu De Backer, Guido Dedene, Jacques Vandenbulcke",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311072
2004,Universal Report: A Generic Reverse Engineering Tool.,Claude Tadonki,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311073
2004,CHIVE - A Program Source Visualisation Framework.,"Brendan Cleary, Christopher Exton",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1311074
2003,How Understanding and Restructuring Differ from Compiling — A Rewriting Perspective,Paul Klint,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199184
2003,YAAB (Yet Another AST Browser): Using OCL to Navigate ASTs,"G. Antoniol, M. Di Penta, E. Merlo",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199185
2003,Design Recovery of a Two Level System,"Thomas Dean, Yuling Chen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199186
2003,"Effective, Automatic Procedure Extraction","Raghavan Komondoor, Susan Horwitz",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199187
2003,Understanding Change-Proneness in OO Software through Visualization,"James M. Bieman, Anneliese A. Andrews, Helen J. Yang",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199188
2003,Analyzing and Understanding Architectural Characteristics of COM+ Components,"Martin Pinzger, Johann Oberleitner, Harald Gall",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199189
2003,A Tool For Understanding Multi-Language Program Dependencies,"Panagiotis K. Linos, Zhi-hong Chen, Seth Berrier, Brian O'Rourke",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199190
2003,Event-Based Performance Analysis,Steven P. Reiss,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199191
2003,Applying the Decorator Pattern for Profiling Object-Oriented Software,"Edward B. Duffy, J. Paul Gibson, Brian A. Malloy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199192
2003,Automatic Design Pattern Detection,"Dirk Heuzeroth, Thomas Holl, Gustav Högström, Welf Löwe",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199193
2003,Comprehension of Software Analysis Data Using 3D Visualization,"Andrian Marcus, Louis Feng, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199194
2003,Identifying Comprehension Bottlenecks Using Program Slicing and Cognitive Complexity Metrics,"Juergen Rilling, Tuomas Klemola",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199195
2003,Facilitating Program Comprehension by Mining Association Rules from Source Code,"Christos Tjortjis, Loukas Sinos, Paul Layzell",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199196
2003,An XML-Based Lightweight C++ Fact Extractor,"Michael L. Collard, Huzefa H. Kagdi, Jonathan I. Maletic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=10005
2003,Generalized Selective XML Markup of Source Code Using Agile Parsing,James R. Cordy,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=10007
2003,Syntactic Approximation Using Iterative Lexical Analysis,"Anthony Cox, Charles Clarke",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=10006
2003,Blooms' Taxonomy: A Framework for Assessing Programmers' Knowledge of Software Systems,"Jim Buckley, Chris Exton",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199200
2003,Individual Differences in Program Comprehension Strategies in Unfamiliar Programming Systems,"Andrew Jensen Ko, Bob Uttl",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199201
2003,Observing and Measuring Cognitive Support: Steps Toward Systematic Tool Evaluation and Engineering,Andrew Walenstein,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199202
2003,Comprehending Reality -- Practical Barriers to Industrial Adoption of Software Maintenance Automation,James R. Cordy,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199203
2003,Using Clustering to Support the Migration from Static to Dynamic Web Pages,"Filippo Ricca, Paolo Tonella",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199204
2003,Software Components Capture Using Graph Clustering,"Yves Chiricota, Fabien Jourdan, Guy Melançon",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199205
2003,An Optimal Algorithm for MoJo Distance,"Zhihua Wen, Vassilios Tzerpos",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199206
2003,Scaling an Object-Oriented System Execution Visualizer through Sampling,"Andrew Chan, Reid Holmes, Gail C. Murphy, Annie T.T. Ying",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199207
2003,Using Run-Time Data for Program Comprehension,"Thomas Gschwind, Johann Oberleitner, Martin Pinzger",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199208
2003,Are Decomposition Slices Clones?,"Keith Gallagher, Lucas Layman",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199209
2003,Verification of Recovered Software Architectures,"Gerald C. Gannod, Shilpa Murthy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199210
2003,Enhancing Domain-Specific Software Architecture Recovery,"Igor Ivkovic, Michael Godfrey",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199211
2003,Handling Large Search Space in Pattern-Based Reverse Engineering,"Jörg Niere, Jörg P. Wadsack, Lothar Wendehals",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1199212
2002,An Open Visualization Toolkit for Reverse Architecting.,"Alexandru Telea, Alessandro Maccari, Claudio Riva",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021303
2002,Experience with FADE for the Visualization and Abstraction of Software Views.,Aaron J. Quigley,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021304
2002,Mining System-User Interaction Traces for Use Case Models.,"Mohammad El-Ramly, Eleni Stroulia, Paul G. Sorenson",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021305
2002,Comprehension of Object-Oriented Software Cohesion: The Empirical Quagmire.,"Steve Counsell, Emilia Mendes, Stephen Swift",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021308
2002,Aspects of Internal Program Documentation - An Elucidative Perspective.,"Thomas Vestdam, Kurt Nørmark",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021315
2002,Pattern-Supported Architecture Recovery.,"Martin Pinzger, Harald C. Gall",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021318
2002,Where's the Schema? A Taxonomy of Patterns for Software Exchange.,"Dean Jin, James R. Cordy, Thomas R. Dean",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021320
2002,Theory-based Analysis of Cognitive Support in Software Comprehension Tools.,Andrew Walenstein,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021322
2002,Enhancing Program Comprehension with Recovered State Models.,"Stéphane S. Somé, Timothy Lethbridge",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021325
2002,An Empirical Study of the Effect of Semantic Differences on Programmer Comprehension.,David Binkley,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021327
2002,Evaluating Using Animation to Improve Understanding of Sequence Diagrams.,"Elizabeth Burd, Dawn Overy, Ady Wheetman",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021329
2002,On Using a Benchmark to Evaluate C++ Extractors.,"Susan Elliott Sim, Richard C. Holt, Steve M. Easterbrook",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021331
2002,An Integrated Approach for Studying Architectural Evolution.,"Qiang Tu, Michael W. Godfrey",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021334
2002,Building Program Understanding Tools Using Visitor Combinators.,"Arie van Deursen, Joost Visser",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021335
2002,Program Comprehension Experiences with GXL; Comprehension for Comprehension.,"Claire Knight, Malcolm Munro",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021336
2002,Compression Techniques to Simplify the Analysis of Large Execution Traces.,"Abdelwahab Hamou-Lhadj, Timothy Lethbridge",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021337
2002,Dependence-Cache Slicing: A Program Slicing Method Using Lightweight Dynamic Information.,"Tomonori Takada, Fumiaki Ohata, Katsuro Inoue",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021338
2002,Architecture Recovery of Dynamically Linked Applications: A Case Study.,"Igor Ivkovic, Michael W. Godfrey",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021339
2002,Fused Data-Centric Visualizations for Software Evolution Environments.,"Jens H. Jahnke, Hausi A. Müller, Andrew Walenstein, Nikolai Mansurov, Kenny Wong",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021340
2002,Evolving Ispell: A Case Study of Program Understanding for Reuse.,"Lerina Aversano, Gerardo Canfora, Andrea De Lucia, Silvio Stefanucci",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021341
2002,Traceability Recovery in RAD Software Systems.,"Massimiliano Di Penta, Sara Gradara, Giuliano Antoniol",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021342
2002,Lightweight Impact Analysis using Island Grammars.,Leon Moonen,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021343
2002,Relocating XML Elements from Preprocessed to Unprocessed Code.,"Anthony Cox, Charles L. A. Clarke",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021344
2002,Using Graph Patterns to Extract Scenarios.,"Jingwei Wu, Ahmed E. Hassan, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021345
2002,Slicing Aspect-Oriented Software.,Jianjun Zhao,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021346
2002,Comprehending Web Applications by a Clustering Based Approach.,"Giuseppe A. Di Lucca, Anna Rita Fasolino, F. Pace, Porfirio Tramontana, Ugo de Carlini",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021347
2002,The Role of Concepts in Program Comprehension.,"Václav Rajlich, Norman Wilde",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021348
2002,Constructivism and Program Comprehension Strategies.,Christopher Exton,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021349
2002,On Selecting Software Visualization Tools for Program Understanding in an Industrial Context.,"Scott R. Tilley, Shihong Huang",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021350
2002,Source Code Files as Structured Documents.,"Jonathan I. Maletic, Michael L. Collard, Andrian Marcus",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1021351
2001,"Systems Evolution, Components and Services: Understanding the New Software Environment.",Keith H. Bennett,no link
2001,Software Visualization Tools: Survey and Analysis.,"Sarita Bassil, Rudolf K. Keller",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921708
2001,Mediating Diverse Visualisations for Comprehension.,"Claire Knight, Malcolm Munro",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921710
2001,Visualizing Object-Oriented Software in Virtual Reality.,"Jonathan I. Maletic, Andrian Marcus, Greg Dunlap, Jason Leigh",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921711
2001,Effects of Pointers on Data Dependences.,"Alessandro Orso, Saurabh Sinha, Mary Jean Harrold",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921712
2001,Program Slice Browser.,"Yunbo Deng, Suraj C. Kothari, Yogy Namara",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921713
2001,Understanding Distributed Systems via Execution Trace Data.,"Johan Moe, David A. Carr",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921714
2001,Inference-Based and Expectation-Based Processing in Program Comprehension.,"Michael P. O'Brien, Jim Buckley",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921715
2001,Navigation and Comprehension of Programs by Novice Programmers.,"Russell Mosemann, Susan Wiedenbeck",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921716
2001,Backward Conditioning: A New Program Specialisation Technique and Its Application to Program Comprehension.,"Chris Fox, Sebastian Danicic, Mark Harman, Robert M. Hierons",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921717
2001,Simplicity: A Key Engineering Concept for Program Understanding.,"Yang Li, Hongji Yang",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921718
2001,SHriMP Views: An Interactive Environment for Exploring Java Programs.,"Margaret-Anne D. Storey, Casey Best, Jeff Michaud",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921719
2001,Automated Analysis of Scientific and Engineering Semantics.,Mark E. M. Stewart,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921720
2001,Alborz: A Query-based Tool for Software Architecture Recovery.,Kamran Sartipi,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921721
2001,Report from the Dagstuhl Seminar on Interoperability of Reengineering Tools.,Timothy Lethbridge,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921722
2001,Structure-Behavior-Function Program Understanding.,"Eleni Stroulia, Tarja Systä",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921723
2001,Software Architecture: Leverage for System/Program Comprehension.,Dewayne E. Perry,no link
2001,Processing Software Source Text in Automated Design Recovery and Transformation.,"Andrew J. Malton, Kevin A. Schneider, James R. Cordy, Thomas R. Dean, Darren Cousineau, Jason Reynolds",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921724
2001,A Flexible Method for Segmentation in Concept Assignmen.,"Nicolas Gold, Keith H. Bennett",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921725
2001,HSML: Design Directed Source Code Hot Spots.,"James R. Cordy, Kevin A. Schneider, Thomas R. Dean, Andrew J. Malton",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921726
2001,Reverse Engineering Meets Data Analysis.,"Periklis Andritsos, Renée J. Miller",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921727
2001,Extracting Business Logic from Existing COBOL Programs as a Basis for Redevelopment.,Harry M. Sneed,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921728
2001,An Algebraic Notation for Representing Threads in Object Oriented Software Comprehension.,"Giuseppe A. Di Lucca, Anna Rita Fasolino, Ugo de Carlini",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921729
2001,Spreading Knowledge about Gnutella: A Case Study in Understanding Net-Centric Applications.,"Scott R. Tilley, Mohan DeSouza",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921730
2001,Understanding and Improving the Maintenance Process: A Method and Two Case Studies.,"Lerina Aversano, Gerardo Canfora, Silvio Stefanucci",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921731
2001,Comparing Graph-Based Program Comprehension Tools to Relational Database-Based Tools.,"Carola Lange, Andreas Winter, Harry M. Sneed",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921732
2001,A Suite of Tools for Facilitating Reverse Engineering Using Formal Methods.,"Gerald C. Gannod, Betty H. C. Cheng",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921733
2001,GSEE: A Generic Software Exploration Environment.,Jean-Marie Favre,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921734
2001,Adoption of Reverse Engineering Tools: A Cognitive Perspective and Methodology.,"Iyad Zayour, Timothy Lethbridge",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921735
2001,A Software Evaluation Model Using Component Association Views.,Kamran Sartipi,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921736
2001,An Architectural Connectivity Metric and Its Support for Incremental Re-Architecting of Large Legacy Systems.,"Reinder J. Bril, André Postma",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921737
2001,A Method to Re-Organize Legacy Systems via Concept Analysis.,"Giuliano Antoniol, Massimiliano Di Penta, Gerardo Casazza, Ettore Merlo",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921738
2001,Hidden Dependencies in Program Comprehension and Change Propagation.,"Zhifeng Yu, Vaclav Rajlich",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921739
2001,Feature-Driven Program Understanding Using Concept Analysis of Execution Traces.,"Thomas Eisenbarth, Rainer Koschke, Daniel Simon",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921740
2001,Side-Effect Removal Transformation.,"Mark Harman, Malcolm Munro, Lin Hu, Xingyuan Zhang",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921741
2001,Research Challenges in the Reverse Engineering Community.,Kenny Wong,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=921742
2000,Comprehending by varying Focal Distance.,Roland Mittermeir,no link
2000,Program Comprehension and Software Migration Strategies.,Hausi A. Müller,no link
2000,Understanding the Sources of Software Defects: A Filtering Approach.,"Claes Wohlin, Martin Höst, Magnus C. Ohlsson",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852475
2000,Automated Quality Analysis of Component Software for Embedded Systems.,"Jens H. Jahnke, Jörg Niere, Jörg P. Wadsack",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852476
2000,Understanding Some Software Quality Aspects from Architecture and Design Models.,"Lars Bratthall, Claes Wohlin",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852477
2000,A Pattern Matching Framework for Software Architecture Recovery and Restructuring.,"Kamran Sartipi, Kostas Kontogiannis, Farhad Mavaddat",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852478
2000,Architectural Repair of Open Source Software.,"John B. Tran, Michael W. Godfrey, Eric H. S. Lee, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852479
2000,Architectural Level Hypothesis Testing through Reverse Engineering of Object-Oriented Software.,"Steve Counsell, Peter Newson, Emilia Mendes",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852480
2000,A Formalism to Automate Mapping from Program Features to Code.,"Jean-Christophe Deprez, Arun Lakhotia",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852481
2000,Tracing Object-Oriented Code into Functional Requirements.,"Giuliano Antoniol, Gerardo Canfora, Andrea De Lucia, Gerardo Casazza, Ettore Merlo",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852482
2000,Evaluating the Accessor Classification Approach to Detect Abstract Data Types.,"Jean-Francois Girard, Martin Würthner",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852483
2000,Program Comprehension through Multiple Simultaneous Views: A Session with VinEd.,Jorma Sajaniemi,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852484
2000,Smiley-An Interactive Tool for Monitoring Inter-Module Function Calls.,Neil M. Goldman,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852485
2000,Requirements for an Elucidative Programming Environment.,Kurt Nørmark,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852486
2000,Program Comprehension Techniques Improve Software Inspections: A Case Study.,"Stan Rifkin, Lionel E. Deimel",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852487
2000,Direction and Scope of Comprehension-Related Activities by Procedural and Object-Oriented Programmers: An Empirical Study.,"Cynthia L. Corritore, Susan Wiedenbeck",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852488
2000,An Exploratory Case Study of the Maintenance Effectiveness of Traceability Models.,"Alessandro Bianchi, Giuseppe Visaggio, Anna Rita Fasolino",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852489
2000,An Empirical Study of Amorphous Slicing as a Program Comprehension Support Tool.,"David Binkley, L. Ross Raszewski, Christopher Smith, Mark Harman",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852490
2000,Metric-Based Analysis of Context-Free Grammars.,"James F. Power, Brian A. Malloy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852491
2000,Source Animation as a Means of Program Comprehension.,Harry M. Sneed,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852492
2000,The Effect of Call Graph Construction Algorithms for Object-Oriented Programs on Automatic Clustering.,"Derek Rayside, Steve Reuss, Erik Hedges, Kostas Kontogiannis",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852493
2000,A Framework for Experimental Evaluation of Clustering Techniques.,"Rainer Koschke, Thomas Eisenbarth",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852494
2000,On the Stability of Software Clustering Algorithms.,"Vassilios Tzerpos, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852495
2000,Types and Concept Analysis for Legacy Systems.,"Tobias Kuipers, Leon Moonen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852496
2000,A Comparison of Graphs of Concept for Reverse Engineering.,Nicolas Anquetil,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852497
2000,Case Study of Feature Location Using Dependence Graph.,"Kunrong Chen, Vaclav Rajlich",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852498
2000,Identification of Lower-Level Artifacts.,"Giuliano Antoniol, Gerardo Casazza, Ettore Merlo",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852502
2000,Empirical Studies of Programming-in-the-Large: How?,Marian Petre,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852503
2000,Tools for Program Comprehension: Building a Comprehender's Workbench.,Keith Brian Gallagher,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852500
2000,Understanding Program Understanding.,"Francoise Balmas, Harald Wertz, Janice Singer",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=852501
1999,Comprehension with[in] Virtual Environment Visualisations.,"Claire Knight, Malcolm Munro",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777733
1999,Improving the Visibility of Graphical Program Displays: An Experimental Study.,"Panagiotis K. Linos, Esther T. Ososanya, Vijay Karunakaran",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777735
1999,Program Visualisation using C++ Lenses.,"James Westland Cain, Rachel Jane McCrindle",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777738
1999,Reconstructing Ownership Architectures To Help Understand Software Systems.,"Ivan T. Bowman, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777740
1999,An Architecture for Automated Software Maintenance.,"M. P. A. Sellink, Chris Verhoef",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777742
1999,Extending Software Quality Assessment Techniques to Java Systems.,"Jean-François Patenaude, Ettore Merlo, Michel Dagenais, Bruno Laguë",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777743
1999,Improving Software Comprehension through an Automated Dependency Tracer.,"Anna Rita Fasolino, Giuseppe Visaggio",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777744
1999,An Application of Fuzzy Reasoning to Support Automated Program Comprehension.,"Ilene Burnstein, Floyd Saner",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777745
1999,Understanding COBOL Systems using Inferred Types.,"Arie van Deursen, Leon Moonen",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777746
1999,Restructuring Parallel Programs by Transformation of Point-To-Point Interactions into Collective Communication.,"Beniamino Di Martino, Antonino Mazzeo, Nicola Mazzocca, Umberto Villano",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777747
1999,"Comprehending a Complex, Distributed, Object-Oriented Software System a Report from the Field.","Harry M. Sneed, Tomas Dombovari",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777761
1999,Black-Box Understanding of COTS Components.,Bogdan Korel,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777748
1999,The Relationship of Slicing and Debugging to Program Understanding.,"Margaret Ann Francel, Spencer Rugaber",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777749
1999,Parsing C++ Despite Missing Declarations.,"Gregory Knapen, Bruno Laguë, Michel Dagenais, Ettore Merlo",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777750
1999,Slicing Concurrent Java Programs.,Jianjun Zhao,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777751
1999,A Case Study of Applying an Eclectic Approach to Identify Objects in Code.,"Gerardo Canfora, Aniello Cimitile, Andrea De Lucia, Giuseppe A. Di Lucca",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777752
1999,On Managing Classes for Evolving Software.,Liwu Li,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777753
1999,Evolving Object Oriented Design to Improve Code Traceability.,"Giuliano Antoniol, Alessandra Potrich, Paolo Tonella, Roberto Fiutem",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777754
1999,Empirical Evaluation of Hypertextual Information Access from Program Text.,Jussi Koskinen,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777755
1999,On the Role of Static Analysis during Software Maintenance.,"Anneliese von Mayrhauser, Stephen Lang",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777756
1999,The Evolution of Websites.,"Paul Warren, Cornelia Boldyreff, Malcolm Munro",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777757
1999,Recovery of Jump Table Case Statements from Binary Code.,"Cristina Cifuentes, Mike Van Emmerik",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777758
1999,The SPARAMAT Approach to Automatic Comprehension of Sparse Matrix Computations.,"Christoph W. Keßler, Craig Smith",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777759
1999,Program Simplification as a Means of Approximating Undecidable Propositions.,"Mark Harman, Chris Fox, Robert M. Hierons, David Binkley, Sebastian Danicic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=777760
1998,Pattern Visualization for Software Comprehension.,"Reinhard Schauer, Rudolf K. Keller",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693273
1998,Visualizing Year 2000 Program Changes.,"Susan K. Burkwald, Stephen G. Eick, Kurt D. Rivard, John D. Pyrce",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693275
1998,Visualizing Software in Virtual Reality.,"Peter Young, Malcolm Munro",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693276
1998,Developing an Approach for the Recovery of Distributed Software Architectures.,"Nabor C. Mendonça, Jeff Kramer",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693279
1998,An Analysis Framework for Understanding Layered Software Architectures.,"Bruno Laguë, Charles Leduc, André Le Bon, Ettore Merlo, Michel Dagenais",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693281
1998,Using Automatic Clustering to Produce High-Level System Organizations of Source Code.,"Spiros Mancoridis, Brian S. Mitchell, Chris Rorres, Yih-Farn Chen, Emden R. Gansner",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693283
1998,An Architecture for Interoperable Program Understanding Tools.,"Steven Woods, Liam O'Brien, Tao Lin, Keith Gallagher, Alex Quilici",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693285
1998,"Managing a Multi-File, Multi-Language Software Repository for Program Comprehension Tools 3/4 A Generic Approach.",Manfred Kamp,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693287
1998,DIME: A Direct Manipulation Environment for Evolutionary Development of Software.,Arun Lakhotia,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693289
1998,The Effect of Object-Oriented Programming Expertise in Several Dimensions of Comprehension Strategies.,"Françoise Détienne, Jean-Marie Burkhardt, Susan Wiedenbeck",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693294
1998,Rapid System Understanding: Two COBOL Case Studies.,"Arie van Deursen, Tobias Kuipers",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693319
1998,Partial Comprehension of Complex Programs (enough to perform maintenance).,"Katalin Erdös, Harry M. Sneed",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693322
1998,Current Parsing Techniques in Software Renovation Considered Harmful.,"Mark van den Brand, M. P. A. Sellink, Chris Verhoef",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693325
1998,Parsing Minimization when Extracting Information from Code in the Presence of Conditional Compilation.,"Stéphane S. Somé, Timothy Lethbridge",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693328
1998,Specifying the Semantics of Machine Instructions.,"Cristina Cifuentes, Shane Sendall",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693332
1998,Decomposing Legacy Programs: A First Step Towards Migrating to Client-Server Platforms.,"Gerardo Canfora, Aniello Cimitile, Andrea De Lucia, Giuseppe A. Di Lucca",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693336
1998,Program Slicing in Understanding of Large Programs.,"Bogdan Korel, Juergen Rilling",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693339
1998,Design Pattern Recovery in Object-Oriented Software.,"Giuliano Antoniol, Roberto Fiutem, L. Cristoforetti",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693342
1998,Program Understanding Behavior During Adaptation of Large Scale Software.,"Anneliese von Mayrhauser, A. Marie Vans",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693345
1998,Studying Work Practices to Assist Tool Design in Software Engineering.,"Janice Singer, Timothy Lethbridge",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693348
1998,Archetypal Source Code Searches: A Survey of Software Developers and Maintainers.,"Susan Elliott Sim, Charles L. A. Clarke, Richard C. Holt",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693351
1998,Design of a Toolset for Dynamic Analysis of Concurrent Java Program.,"Alessio Bechini, Kuo-Chung Tai",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693354
1998,The Feedback Compiler.,"David Binkley, Bruce Duncan, Brennan Jubb, April Wielgosz",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693358
1998,Automatic Detection of Interaction Patterns for Parallel Program Analysis and Development .,"Beniamino Di Martino, Antonino Mazzeo, Nicola Mazzocca, Umberto Villano",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=693361
1997,Relationships between Documentation and Maintenance Activities,Giuseppe Visaggio,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601256
1997,Cognitive Design Elements to Support the Construction of a Mental Model during Software Visualization,"M.-A.D. Storey, F.D. Fracchia, H.A. Mueller",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601257
1997,Understanding-In-The-Large,J.M. Favre,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601260
1997,Automated Chunking to Support Program Comprehension,"Ilene Burnstein, Katherine Roberson",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601262
1997,Semi-automatic Generation of Parallelizable Patterns from Source Code Examples,"Dejan Markovic, Jack R. Hagemeister, Cauligi S. Raghavendra, Sanjay Bhansali",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601263
1997,Using Knowledge Representation to Understand Interactive Systems,"Melody Moore, Spencer Rugaber",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601265
1997,Amorphous Program Slicing,"Mark Harman, Sebastian Danicic",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601266
1997,Dynamic Program Slicing in Understanding of Program Execution,"Bogdan Korel, Jurgen Rilling",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601269
1997,Points-to Analysis for Program Understanding,"P. Tonella, G. Antoniol, R. Fiutem, E. Merlo",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601271
1997,A Case Study of Domain-based Program Understanding,"Richard Clayton, Spencer Rugaber, Lyman Taylor, Linda Wills",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601273
1997,A Little Knowledge Can Go a Long Way Towards Program Understanding,"Jelber Sayyad-Shirabad, Timothy C. Lethbridge, Steve Lyon",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601275
1997,Facilitating Program Comprehension via Generic Components for State Machines,"Johannes Weidl, Ren? R. Kl?sch, Georg Trausmuth, Harald Gall",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601277
1997,Enriching Program Comprehension for Software Reuse,"Elizabeth Burd, Malcolm Munro",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601279
1997,Identifying objects in legacy systems,"A. Cimitile, A. De Lucia, G.A. Di Lucca, A.R. Fasolino",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601281
1997,Code Understanding through Program Transformation for Reusable Component Identification,"Hongji Yang, Paul Luker, William C. Chu",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601283
1997,Towards Standard for Experiments in Program Comprehension,"Vaclav Rajlich, George S. Cowan",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601284
1997,Position Paper on Research Infrastructure for Reengineering,"Spencer Rugaber, Linda M. Wills",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601286
1997,Building a Research Infrastructure for Program Comprehension Observations,"Steve Lang, Anneliese von Mayrhauser",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601287
1997,On Using the Web as Infrastructure for Reengineering,"Scott R. Tilley, Dennis B. Smith",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601289
1997,Evaluation of the ITOC information system design recovery tool,"A. Berglas, J. Harrison",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601290
1997,Glyphs for Software Visualization,"Mei C. Chuah, Stephen G. Eick",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601291
1997,PUI: A Tool to Support Program Understanding,"Pui-Shan Chan, Malcolm Munro",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=601293
1996,An Interactive Visualization for Message Sequence Charts,"Stephen G. Eick, Amy Wards",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501115
1996,Understanding Function Behaviors through Program Slicing,"Andrea de Lucia, Anna Rita Fasolino, Malcolm Munro",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501116
1996,Towards a Framework for Program Understanding,"Scott R. Tilley, Dennis B. Smith, Santanu Paul",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501117
1996,A Workbench for Program Comprehension during Software Maintenance,"G. Canfora, L. Mancini, M. Tortorella",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501118
1996,"Rapid Development of Simple, Custom Program Analysis Tools",Kevin J. Sullivan,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501119
1996,A Method for The Formal Testing of Program Visualization Tools,T.C. Nicholas Graham,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501120
1996,Toward a Constraint-Satisfaction Framework for Evaluating Program-Understanding Algorithms,"Alex Quilici, Steven Woods",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501121
1996,On the Role of Hypotheses during Opportunistic Understanding While Porting Large Scale Code,"A. von Mayrhauser, A. M. Vans",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501122
1996,Effort Estimation for Program Comprehension,"P. Fiore, F. Lanubile, G. Visaggio",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501123
1996,On Inserting Program Understanding Technology into the Software Change Process,Kenny Wong,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501124
1996,Greater Understanding Through Maintainer Driven Traceability,"C. Boldyreff, E.L. Burd, R.M. Hather, M. Mum-o, E.J. Younger",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501125
1996,Extracting Business Rules from Source Code,"Harry M. Sneed, Katalin Erdos",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501138
1996,Comprehension of Safety-Critical Systems Using Domain-Specific Languages,Tim Bull,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501126
1996,Scalable Interfaces to Support Program Comprehension,"Wayne Citrin, Carlos Santiago, Benjamin Zorn",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501127
1996,Interprocedural analysis for program comprehension by specialization,"S. Blazy, P. Facon",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501128
1996,"Fast, Flexible Syntactic Pattern Matching and Processing","William G. Griswold, Darren C. Atkinson, Collin McCurdy",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501129
1996,A Formal Architectural Design Patterns-Based Approach to Software Understanding,"P.S.C. Alencar, D.D. Cowan, T. Kuntz, C.J.P. Lucena",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501130
1996,PAP Recognizer: A Tool for Automatic Recognition of Parallelizable Patterns,"Beniamino Di Martino, Giulio Iannello",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501131
1996,The Gadfly: An Approach to Architectural-Level System Comprehension,"Kurt Wallnau, Paul Clements, Ed Morris, Robert Krut",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501132
1996,Understanding the architecture of software systems,"R. Fiutem, E. Merlo, G. Antoniol, P. Tonella",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501133
1996,Evaluating process clusters to support automatic program understanding,T. Kunz,http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501134
1996,Improving Program Understanding by Unfolding Layers of Interacting Patterns,"Rene R. Kloesch, Roland T. Mittermeir",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501135
1996,Experiences in Automatic Leveling of Data Flow Diagrams,"Michael Doorley, Anthony Cahill",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501136
1996,Derivation and Presentation of an Abstract Program Space for Ada,"Paul A. Bailes, Paul Burnim, Murray Chapman, Dan Johnston",http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=501137

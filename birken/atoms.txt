7:50 pm
macro-replace #define m 21                       | %s/m/21/g
macro-replace #define o(l, k) for(l=0; l<k; l++) | %s/o(\([^,]*\), *\([^)]*\))/for(\1=0; \1<\2; \1++)/
macro-replace #define n(k) for(T=0; T<k; T++)    | %s/n(\([^)]*\))/for(T=0; T<\1; T++)/

(I tried using s///g, but there are issues with newlines occuring at random places, I resorted to using gcc -E instead)

(i tried newline-after-line-term-semicolon (but not after for-loop semicolons, let vim indentation do its thing), but it was awful, used gcc-indent instead)

collapse all lines, then gcc-indent

expand: char*_ = "'""/*"; -> char* _ = "'" "/*";

concatenate: "'" "/*" -> "'/*"

remove dead code: 


================


Confusing techniques (most are taken directly from hints.html):
-Storing state arcs as string text
-Global variable automatic zero initialization
-x + 1, is used multiple times to determine if a value is not -1. Similarly, expressions of the form x - y are used to determine if x != y
-Several arrays store unrelated data in segments throughout the array to reduce named variables
-x["str"] ~= "str"[x] (if the latter actually worked), since x["str"] == *(&x + &str)
-spurious variables
-There is functionally useless code -> char*_ = "'""/*";
-Before macro replace
-Macro replacement turns: n(4&&L)  ->  for (T = 0; T < 4 && L; T++) {
-(i & 3) - 3 is used to identify i == {3, 7}
